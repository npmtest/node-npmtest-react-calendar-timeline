{"/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/test.js":"/* istanbul instrument in package npmtest_react_calendar_timeline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/lib.npmtest_react_calendar_timeline.js":"/* istanbul instrument in package npmtest_react_calendar_timeline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_calendar_timeline = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_calendar_timeline = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-calendar-timeline && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_calendar_timeline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_calendar_timeline\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_calendar_timeline.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_calendar_timeline.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_calendar_timeline.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_calendar_timeline.__dirname + '/lib.npmtest_react_calendar_timeline.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Timeline = require('./lib/Timeline');\n\nvar _Timeline2 = _interopRequireDefault(_Timeline);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = _Timeline2.default;","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/Timeline.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nrequire('./Timeline.css');\n\nvar _Items = require('./items/Items');\n\nvar _Items2 = _interopRequireDefault(_Items);\n\nvar _InfoLabel = require('./layout/InfoLabel');\n\nvar _InfoLabel2 = _interopRequireDefault(_InfoLabel);\n\nvar _Sidebar = require('./layout/Sidebar');\n\nvar _Sidebar2 = _interopRequireDefault(_Sidebar);\n\nvar _Header = require('./layout/Header');\n\nvar _Header2 = _interopRequireDefault(_Header);\n\nvar _VerticalLines = require('./lines/VerticalLines');\n\nvar _VerticalLines2 = _interopRequireDefault(_VerticalLines);\n\nvar _HorizontalLines = require('./lines/HorizontalLines');\n\nvar _HorizontalLines2 = _interopRequireDefault(_HorizontalLines);\n\nvar _TodayLine = require('./lines/TodayLine');\n\nvar _TodayLine2 = _interopRequireDefault(_TodayLine);\n\nvar _utils = require('./utils.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar defaultKeys = {\n  groupIdKey: 'id',\n  groupTitleKey: 'title',\n  itemIdKey: 'id',\n  itemTitleKey: 'title',\n  itemDivTitleKey: 'title',\n  itemGroupKey: 'group',\n  itemTimeStartKey: 'start_time',\n  itemTimeEndKey: 'end_time'\n};\n\nvar defaultTimeSteps = {\n  second: 1,\n  minute: 1,\n  hour: 1,\n  day: 1,\n  month: 1,\n  year: 1\n};\n\nvar ReactCalendarTimeline = function (_Component) {\n  _inherits(ReactCalendarTimeline, _Component);\n\n  function ReactCalendarTimeline(props) {\n    _classCallCheck(this, ReactCalendarTimeline);\n\n    var _this = _possibleConstructorReturn(this, (ReactCalendarTimeline.__proto__ || Object.getPrototypeOf(ReactCalendarTimeline)).call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var visibleTimeStart = null;\n    var visibleTimeEnd = null;\n\n    if (_this.props.defaultTimeStart && _this.props.defaultTimeEnd) {\n      visibleTimeStart = _this.props.defaultTimeStart.valueOf();\n      visibleTimeEnd = _this.props.defaultTimeEnd.valueOf();\n    } else if (_this.props.visibleTimeStart && _this.props.visibleTimeEnd) {\n      visibleTimeStart = _this.props.visibleTimeStart;\n      visibleTimeEnd = _this.props.visibleTimeEnd;\n    } else {\n      visibleTimeStart = Math.min.apply(Math, _toConsumableArray(_this.props.items.map(function (item) {\n        return (0, _utils._get)(item, 'start').getTime();\n      })));\n      visibleTimeEnd = Math.max.apply(Math, _toConsumableArray(_this.props.items.map(function (item) {\n        return (0, _utils._get)(item, 'end').getTime();\n      })));\n\n      if (!visibleTimeStart || !visibleTimeEnd) {\n        visibleTimeStart = new Date().getTime() - 86400 * 7 * 1000;\n        visibleTimeEnd = new Date().getTime() + 86400 * 7 * 1000;\n      }\n\n      if (_this.props.onTimeInit) {\n        _this.props.onTimeInit(visibleTimeStart, visibleTimeEnd);\n      }\n    }\n\n    _this.state = {\n      width: 1000,\n\n      visibleTimeStart: visibleTimeStart,\n      visibleTimeEnd: visibleTimeEnd,\n      canvasTimeStart: visibleTimeStart - (visibleTimeEnd - visibleTimeStart),\n\n      selectedItem: null,\n      dragTime: null,\n      dragGroupTitle: null,\n      resizeTime: null,\n      isDragging: false,\n      topOffset: 0,\n      resizingItem: null,\n      resizingEdge: null\n    };\n\n    var _this$stackItems = _this.stackItems(props.items, props.groups, _this.state.canvasTimeStart, _this.state.visibleTimeStart, _this.state.visibleTimeEnd, _this.state.width),\n        dimensionItems = _this$stackItems.dimensionItems,\n        height = _this$stackItems.height,\n        groupHeights = _this$stackItems.groupHeights,\n        groupTops = _this$stackItems.groupTops;\n\n    _this.state.dimensionItems = dimensionItems;\n    _this.state.height = height;\n    _this.state.groupHeights = groupHeights;\n    _this.state.groupTops = groupTops;\n    return _this;\n  }\n\n  _createClass(ReactCalendarTimeline, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.resize();\n\n      this.resizeEventListener = {\n        handleEvent: function handleEvent(event) {\n          _this2.resize();\n        }\n      };\n\n      window.addEventListener('resize', this.resizeEventListener);\n\n      this.lastTouchDistance = null;\n\n      this.refs.scrollComponent.addEventListener('touchstart', this.touchStart);\n      this.refs.scrollComponent.addEventListener('touchmove', this.touchMove);\n      this.refs.scrollComponent.addEventListener('touchend', this.touchEnd);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.resizeEventListener);\n      this.refs.scrollComponent.removeEventListener('touchstart', this.touchStart);\n      this.refs.scrollComponent.removeEventListener('touchmove', this.touchMove);\n      this.refs.scrollComponent.removeEventListener('touchend', this.touchEnd);\n    }\n  }, {\n    key: 'resize',\n    value: function resize() {\n      // FIXME currently when the component creates a scroll the scrollbar is not used in the initial width calculation, resizing fixes this\n      var _refs$container$getBo = this.refs.container.getBoundingClientRect(),\n          containerWidth = _refs$container$getBo.width,\n          containerTop = _refs$container$getBo.top;\n\n      var width = containerWidth - this.props.sidebarWidth;\n\n      var _stackItems = this.stackItems(this.props.items, this.props.groups, this.state.canvasTimeStart, this.state.visibleTimeStart, this.state.visibleTimeEnd, width),\n          dimensionItems = _stackItems.dimensionItems,\n          height = _stackItems.height,\n          groupHeights = _stackItems.groupHeights,\n          groupTops = _stackItems.groupTops;\n\n      this.setState({\n        width: width,\n        topOffset: containerTop + window.pageYOffset,\n        dimensionItems: dimensionItems,\n        height: height,\n        groupHeights: groupHeights,\n        groupTops: groupTops\n      });\n      this.refs.scrollComponent.scrollLeft = width;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var visibleTimeStart = nextProps.visibleTimeStart,\n          visibleTimeEnd = nextProps.visibleTimeEnd,\n          items = nextProps.items,\n          groups = nextProps.groups;\n\n\n      if (visibleTimeStart && visibleTimeEnd) {\n        this.updateScrollCanvas(visibleTimeStart, visibleTimeEnd, items !== this.props.items || groups !== this.props.groups, items, groups);\n      }\n\n      if (items !== this.props.items || groups !== this.props.groups) {\n        this.updateDimensions(items, groups);\n      }\n    }\n  }, {\n    key: 'updateDimensions',\n    value: function updateDimensions(items, groups) {\n      var _state = this.state,\n          canvasTimeStart = _state.canvasTimeStart,\n          visibleTimeStart = _state.visibleTimeStart,\n          visibleTimeEnd = _state.visibleTimeEnd,\n          width = _state.width;\n\n      var _stackItems2 = this.stackItems(items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, width),\n          dimensionItems = _stackItems2.dimensionItems,\n          height = _stackItems2.height,\n          groupHeights = _stackItems2.groupHeights,\n          groupTops = _stackItems2.groupTops;\n\n      this.setState({ dimensionItems: dimensionItems, height: height, groupHeights: groupHeights, groupTops: groupTops });\n    }\n\n    // called when the visible time changes\n\n  }, {\n    key: 'zoomIn',\n    value: function zoomIn(e) {\n      e.preventDefault();\n\n      this.changeZoom(0.75);\n    }\n  }, {\n    key: 'zoomOut',\n    value: function zoomOut(e) {\n      e.preventDefault();\n\n      this.changeZoom(1.25);\n    }\n  }, {\n    key: 'changeZoom',\n    value: function changeZoom(scale) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;\n      var _props = this.props,\n          minZoom = _props.minZoom,\n          maxZoom = _props.maxZoom;\n\n      var oldZoom = this.state.visibleTimeEnd - this.state.visibleTimeStart;\n      var newZoom = Math.min(Math.max(Math.round(oldZoom * scale), minZoom), maxZoom); // min 1 min, max 20 years\n      var newVisibleTimeStart = Math.round(this.state.visibleTimeStart + (oldZoom - newZoom) * offset);\n\n      this.props.onTimeChange.bind(this)(newVisibleTimeStart, newVisibleTimeStart + newZoom, this.updateScrollCanvas);\n    }\n  }, {\n    key: 'rowAndTimeFromEvent',\n    value: function rowAndTimeFromEvent(e) {\n      var _props2 = this.props,\n          lineHeight = _props2.lineHeight,\n          dragSnap = _props2.dragSnap;\n      var _state2 = this.state,\n          width = _state2.width,\n          visibleTimeStart = _state2.visibleTimeStart,\n          visibleTimeEnd = _state2.visibleTimeEnd;\n\n\n      var parentPosition = (0, _utils.getParentPosition)(e.currentTarget);\n      var x = e.clientX - parentPosition.x;\n      var y = e.clientY - parentPosition.y;\n\n      var row = Math.floor((y - lineHeight * 2) / lineHeight);\n      var time = Math.round(visibleTimeStart + x / width * (visibleTimeEnd - visibleTimeStart));\n      time = Math.floor(time / dragSnap) * dragSnap;\n\n      return [row, time];\n    }\n  }, {\n    key: 'todayLine',\n    value: function todayLine(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, height, headerHeight) {\n      return _react2.default.createElement(_TodayLine2.default, { canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        lineHeight: this.props.lineHeight,\n        lineCount: (0, _utils._length)(this.props.groups),\n        height: height,\n        headerHeight: headerHeight\n      });\n    }\n  }, {\n    key: 'verticalLines',\n    value: function verticalLines(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height, headerHeight) {\n      return _react2.default.createElement(_VerticalLines2.default, { canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        lineHeight: this.props.lineHeight,\n        lineCount: (0, _utils._length)(this.props.groups),\n        minUnit: minUnit,\n        timeSteps: timeSteps,\n        fixedHeader: this.props.fixedHeader,\n        height: height,\n        headerHeight: headerHeight\n      });\n    }\n  }, {\n    key: 'horizontalLines',\n    value: function horizontalLines(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, groupHeights, headerHeight) {\n      return _react2.default.createElement(_HorizontalLines2.default, { canvasWidth: canvasWidth,\n        lineHeight: this.props.lineHeight,\n        lineCount: (0, _utils._length)(this.props.groups),\n        groups: this.props.groups,\n        groupHeights: groupHeights,\n        headerHeight: headerHeight\n      });\n    }\n  }, {\n    key: 'items',\n    value: function items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops) {\n      return _react2.default.createElement(_Items2.default, { canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        lineHeight: this.props.lineHeight,\n        lineCount: (0, _utils._length)(this.props.groups),\n        dimensionItems: dimensionItems,\n        minUnit: minUnit,\n        groupHeights: groupHeights,\n        groupTops: groupTops,\n        items: this.props.items,\n        groups: this.props.groups,\n        keys: this.props.keys,\n        selectedItem: this.state.selectedItem,\n        dragSnap: this.props.dragSnap,\n        minResizeWidth: this.props.minResizeWidth,\n        canChangeGroup: this.props.canChangeGroup,\n        canMove: this.props.canMove,\n        canResize: this.props.canResize,\n        useResizeHandle: this.props.useResizeHandle,\n        canSelect: this.props.canSelect,\n        moveResizeValidator: this.props.moveResizeValidator,\n        topOffset: this.state.topOffset,\n        itemSelect: this.selectItem,\n        itemDrag: this.dragItem,\n        itemDrop: this.dropItem,\n        onItemDoubleClick: this.props.onItemDoubleClick,\n        onItemContextMenu: this.props.onItemContextMenu,\n        itemResizing: this.resizingItem,\n        itemResized: this.resizedItem });\n    }\n  }, {\n    key: 'infoLabel',\n    value: function infoLabel() {\n      var label = null;\n\n      if (this.state.dragTime) {\n        label = (0, _moment2.default)(this.state.dragTime).format('LLL') + ', ' + this.state.dragGroupTitle;\n      } else if (this.state.resizeTime) {\n        label = (0, _moment2.default)(this.state.resizeTime).format('LLL');\n      }\n\n      return label ? _react2.default.createElement(_InfoLabel2.default, { label: label }) : '';\n    }\n  }, {\n    key: 'header',\n    value: function header(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, timeSteps, headerLabelGroupHeight, headerLabelHeight) {\n      return _react2.default.createElement(_Header2.default, { canvasTimeStart: canvasTimeStart,\n        canvasTimeEnd: canvasTimeEnd,\n        canvasWidth: canvasWidth,\n        lineHeight: this.props.lineHeight,\n        minUnit: minUnit,\n        timeSteps: timeSteps,\n        headerLabelGroupHeight: headerLabelGroupHeight,\n        headerLabelHeight: headerLabelHeight,\n        width: this.state.width,\n        zoom: zoom,\n        visibleTimeStart: this.state.visibleTimeStart,\n        visibleTimeEnd: this.state.visibleTimeEnd,\n        fixedHeader: this.props.fixedHeader,\n        zIndex: this.props.zIndexStart + 1,\n        showPeriod: this.showPeriod });\n    }\n  }, {\n    key: 'sidebar',\n    value: function sidebar(height, groupHeights, headerHeight) {\n      return _react2.default.createElement(\n        _Sidebar2.default,\n        { groups: this.props.groups,\n          keys: this.props.keys,\n\n          width: this.props.sidebarWidth,\n          lineHeight: this.props.lineHeight,\n          groupHeights: groupHeights,\n          height: height,\n          headerHeight: headerHeight,\n\n          fixedHeader: this.props.fixedHeader,\n          zIndex: this.props.zIndexStart + 2 },\n        this.props.children\n      );\n    }\n  }, {\n    key: 'stackItems',\n    value: function stackItems(items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, width) {\n      var _props3 = this.props,\n          keys = _props3.keys,\n          dragSnap = _props3.dragSnap,\n          lineHeight = _props3.lineHeight,\n          headerLabelGroupHeight = _props3.headerLabelGroupHeight,\n          headerLabelHeight = _props3.headerLabelHeight,\n          stackItems = _props3.stackItems,\n          fullUpdate = _props3.fullUpdate,\n          itemHeightRatio = _props3.itemHeightRatio;\n      var _state3 = this.state,\n          draggingItem = _state3.draggingItem,\n          dragTime = _state3.dragTime,\n          resizingItem = _state3.resizingItem,\n          resizingEdge = _state3.resizingEdge,\n          resizeTime = _state3.resizeTime,\n          newGroupOrder = _state3.newGroupOrder;\n\n      var zoom = visibleTimeEnd - visibleTimeStart;\n      var canvasTimeEnd = canvasTimeStart + zoom * 3;\n      var canvasWidth = width * 3;\n      var headerHeight = headerLabelGroupHeight + headerLabelHeight;\n\n      var visibleItems = (0, _utils.getVisibleItems)(items, canvasTimeStart, canvasTimeEnd, keys);\n      var groupOrders = (0, _utils.getGroupOrders)(groups, keys);\n\n      var dimensionItems = visibleItems.map(function (item) {\n        return {\n          id: (0, _utils._get)(item, keys.itemIdKey),\n          dimensions: (0, _utils.calculateDimensions)({\n            item: item,\n            order: groupOrders[(0, _utils._get)(item, keys.itemGroupKey)],\n            keys: keys,\n            canvasTimeStart: canvasTimeStart,\n            canvasTimeEnd: canvasTimeEnd,\n            canvasWidth: canvasWidth,\n            dragSnap: dragSnap,\n            lineHeight: lineHeight,\n            draggingItem: draggingItem,\n            dragTime: dragTime,\n            resizingItem: resizingItem,\n            resizingEdge: resizingEdge,\n            resizeTime: resizeTime,\n            newGroupOrder: newGroupOrder,\n            itemHeightRatio: itemHeightRatio,\n            fullUpdate: fullUpdate,\n            visibleTimeStart: visibleTimeStart,\n            visibleTimeEnd: visibleTimeEnd\n          })\n        };\n      }).filter(function (i) {\n        return i.dimensions;\n      });\n\n      var stackingMethod = stackItems ? _utils.stack : _utils.nostack;\n\n      var _stackingMethod = stackingMethod(dimensionItems, groupOrders, lineHeight, headerHeight),\n          height = _stackingMethod.height,\n          groupHeights = _stackingMethod.groupHeights,\n          groupTops = _stackingMethod.groupTops;\n\n      return { dimensionItems: dimensionItems, height: height, groupHeights: groupHeights, groupTops: groupTops };\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n          items = _props4.items,\n          groups = _props4.groups,\n          headerLabelGroupHeight = _props4.headerLabelGroupHeight,\n          headerLabelHeight = _props4.headerLabelHeight,\n          sidebarWidth = _props4.sidebarWidth,\n          timeSteps = _props4.timeSteps;\n      var _state4 = this.state,\n          draggingItem = _state4.draggingItem,\n          resizingItem = _state4.resizingItem,\n          isDragging = _state4.isDragging,\n          width = _state4.width,\n          visibleTimeStart = _state4.visibleTimeStart,\n          visibleTimeEnd = _state4.visibleTimeEnd,\n          canvasTimeStart = _state4.canvasTimeStart;\n      var _state5 = this.state,\n          dimensionItems = _state5.dimensionItems,\n          height = _state5.height,\n          groupHeights = _state5.groupHeights,\n          groupTops = _state5.groupTops;\n\n      var zoom = visibleTimeEnd - visibleTimeStart;\n      var canvasTimeEnd = canvasTimeStart + zoom * 3;\n      var canvasWidth = width * 3;\n      var minUnit = (0, _utils.getMinUnit)(zoom, width, timeSteps);\n      var headerHeight = headerLabelGroupHeight + headerLabelHeight;\n\n      if (draggingItem || resizingItem) {\n        var stackResults = this.stackItems(items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, width);\n        dimensionItems = stackResults.dimensionItems;\n        height = stackResults.height;\n        groupHeights = stackResults.groupHeights;\n        groupTops = stackResults.groupTops;\n      }\n\n      var outerComponentStyle = {\n        height: height + 'px'\n      };\n\n      var scrollComponentStyle = {\n        width: width + 'px',\n        height: height + 20 + 'px',\n        cursor: isDragging ? 'move' : 'default'\n      };\n\n      var canvasComponentStyle = {\n        width: canvasWidth + 'px',\n        height: height + 'px'\n      };\n\n      return _react2.default.createElement(\n        'div',\n        { style: this.props.style, ref: 'container', className: 'react-calendar-timeline' },\n        _react2.default.createElement(\n          'div',\n          { style: outerComponentStyle, className: 'rct-outer' },\n          sidebarWidth > 0 ? this.sidebar(height, groupHeights, headerHeight) : null,\n          _react2.default.createElement(\n            'div',\n            { ref: 'scrollComponent',\n              className: 'rct-scroll',\n              style: scrollComponentStyle,\n              onScroll: this.onScroll,\n              onWheel: this.onWheel,\n              onMouseDown: this.handleMouseDown,\n              onMouseMove: this.handleMouseMove,\n              onMouseUp: this.handleMouseUp\n            },\n            _react2.default.createElement(\n              'div',\n              { ref: 'canvasComponent',\n                className: 'rct-canvas',\n                style: canvasComponentStyle,\n                onDoubleClick: this.handleDoubleClick\n              },\n              this.items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops),\n              this.verticalLines(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height, headerHeight),\n              this.horizontalLines(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, groupHeights, headerHeight),\n              this.todayLine(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, height, headerHeight),\n              this.infoLabel(),\n              this.header(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, timeSteps, headerLabelGroupHeight, headerLabelHeight)\n            )\n          )\n        )\n      );\n    }\n  }]);\n\n  return ReactCalendarTimeline;\n}(_react.Component);\n\nReactCalendarTimeline.propTypes = {\n  groups: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object]).isRequired,\n  items: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object]).isRequired,\n  sidebarWidth: _react.PropTypes.number,\n  dragSnap: _react.PropTypes.number,\n  minResizeWidth: _react.PropTypes.number,\n  fixedHeader: _react.PropTypes.oneOf(['fixed', 'absolute', 'none']),\n  fullUpdate: _react.PropTypes.bool,\n  zIndexStart: _react.PropTypes.number,\n  lineHeight: _react.PropTypes.number,\n  headerLabelGroupHeight: _react.PropTypes.number,\n  headerLabelHeight: _react.PropTypes.number,\n  itemHeightRatio: _react.PropTypes.number,\n\n  minZoom: _react.PropTypes.number,\n  maxZoom: _react.PropTypes.number,\n\n  clickTolerance: _react.PropTypes.number,\n\n  canChangeGroup: _react.PropTypes.bool,\n  canMove: _react.PropTypes.bool,\n  canResize: _react.PropTypes.oneOf([true, false, 'left', 'right', 'both']),\n  useResizeHandle: _react.PropTypes.bool,\n  canSelect: _react.PropTypes.bool,\n\n  stackItems: _react.PropTypes.bool,\n\n  traditionalZoom: _react.PropTypes.bool,\n\n  itemTouchSendsClick: _react.PropTypes.bool,\n\n  onItemMove: _react.PropTypes.func,\n  onItemResize: _react.PropTypes.func,\n  onItemClick: _react.PropTypes.func,\n  onItemSelect: _react.PropTypes.func,\n  onCanvasClick: _react.PropTypes.func,\n  onItemDoubleClick: _react.PropTypes.func,\n  onItemContextMenu: _react.PropTypes.func,\n  onCanvasDoubleClick: _react.PropTypes.func,\n\n  moveResizeValidator: _react.PropTypes.func,\n\n  dayBackground: _react.PropTypes.func,\n\n  style: _react.PropTypes.object,\n  keys: _react.PropTypes.object,\n\n  timeSteps: _react.PropTypes.object,\n\n  defaultTimeStart: _react.PropTypes.object,\n  defaultTimeEnd: _react.PropTypes.object,\n\n  visibleTimeStart: _react.PropTypes.number,\n  visibleTimeEnd: _react.PropTypes.number,\n  onTimeChange: _react.PropTypes.func,\n  onTimeInit: _react.PropTypes.func,\n  onBoundsChange: _react.PropTypes.func,\n\n  children: _react.PropTypes.node\n};\nReactCalendarTimeline.defaultProps = {\n  sidebarWidth: 150,\n  dragSnap: 1000 * 60 * 15, // 15min\n  minResizeWidth: 20,\n  fixedHeader: 'none', // fixed or absolute or none\n  fullUpdate: true,\n  zIndexStart: 10,\n  lineHeight: 30,\n  headerLabelGroupHeight: 30,\n  headerLabelHeight: 30,\n  itemHeightRatio: 0.65,\n\n  minZoom: 60 * 60 * 1000, // 1 hour\n  maxZoom: 5 * 365.24 * 86400 * 1000, // 5 years\n\n  clickTolerance: 3, // how many pixels can we drag for it to be still considered a click?\n\n  canChangeGroup: true,\n  canMove: true,\n  canResize: 'right',\n  useResizeHandle: false,\n  canSelect: true,\n\n  stackItems: false,\n\n  traditionalZoom: false,\n\n  onItemMove: null,\n  onItemResize: null,\n  onItemClick: null,\n  onItemSelect: null,\n  onCanvasClick: null,\n  onItemDoubleClick: null,\n  onItemContextMenu: null,\n\n  moveResizeValidator: null,\n\n  dayBackground: null,\n\n  defaultTimeStart: null,\n  defaultTimeEnd: null,\n\n  itemTouchSendsClick: false,\n\n  style: {},\n  keys: defaultKeys,\n  timeSteps: defaultTimeSteps,\n\n  // if you pass in visibleTimeStart and visibleTimeEnd, you must also pass onTimeChange(visibleTimeStart, visibleTimeEnd),\n  // which needs to update the props visibleTimeStart and visibleTimeEnd to the ones passed\n  visibleTimeStart: null,\n  visibleTimeEnd: null,\n  onTimeChange: function onTimeChange(visibleTimeStart, visibleTimeEnd, updateScrollCanvas) {\n    updateScrollCanvas(visibleTimeStart, visibleTimeEnd);\n  },\n  // called after the calendar loads and the visible time has been calculated\n  onTimeInit: null,\n  // called when the canvas area of the calendar changes\n  onBoundsChange: null,\n  children: null\n};\n\nvar _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.touchStart = function (e) {\n    if (e.touches.length === 2) {\n      e.preventDefault();\n\n      _this3.lastTouchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX);\n      _this3.singleTouchStart = null;\n      _this3.lastSingleTouch = null;\n    } else if (e.touches.length === 1 && _this3.props.fixedHeader === 'fixed') {\n      e.preventDefault();\n\n      var x = e.touches[0].clientX;\n      var y = e.touches[0].clientY;\n\n      _this3.lastTouchDistance = null;\n      _this3.singleTouchStart = { x: x, y: y, screenY: window.pageYOffset };\n      _this3.lastSingleTouch = { x: x, y: y, screenY: window.pageYOffset };\n    }\n  };\n\n  this.touchMove = function (e) {\n    if (_this3.state.dragTime || _this3.state.resizeTime) {\n      e.preventDefault();\n      return;\n    }\n    if (_this3.lastTouchDistance && e.touches.length === 2) {\n      e.preventDefault();\n\n      var touchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX);\n\n      var parentPosition = (0, _utils.getParentPosition)(e.currentTarget);\n      var xPosition = (e.touches[0].screenX + e.touches[1].screenX) / 2 - parentPosition.x;\n\n      if (touchDistance !== 0 && _this3.lastTouchDistance !== 0) {\n        _this3.changeZoom(_this3.lastTouchDistance / touchDistance, xPosition / _this3.state.width);\n        _this3.lastTouchDistance = touchDistance;\n      }\n    } else if (_this3.lastSingleTouch && e.touches.length === 1 && _this3.props.fixedHeader === 'fixed') {\n      e.preventDefault();\n\n      var x = e.touches[0].clientX;\n      var y = e.touches[0].clientY;\n\n      var deltaX = x - _this3.lastSingleTouch.x;\n      // let deltaY = y - this.lastSingleTouch.y\n\n      var deltaX0 = x - _this3.singleTouchStart.x;\n      var deltaY0 = y - _this3.singleTouchStart.y;\n\n      _this3.lastSingleTouch = { x: x, y: y };\n\n      var moveX = Math.abs(deltaX0) * 3 > Math.abs(deltaY0);\n      var moveY = Math.abs(deltaY0) * 3 > Math.abs(deltaX0);\n\n      if (deltaX !== 0 && moveX) {\n        _this3.refs.scrollComponent.scrollLeft -= deltaX;\n      }\n      if (moveY) {\n        window.scrollTo(window.pageXOffset, _this3.singleTouchStart.screenY - deltaY0);\n      }\n    }\n  };\n\n  this.touchEnd = function (e) {\n    if (_this3.lastTouchDistance) {\n      e.preventDefault();\n\n      _this3.lastTouchDistance = null;\n    }\n    if (_this3.lastSingleTouch) {\n      e.preventDefault();\n\n      _this3.lastSingleTouch = null;\n      _this3.singleTouchStart = null;\n    }\n  };\n\n  this.onScroll = function () {\n    var scrollComponent = _this3.refs.scrollComponent;\n    var canvasTimeStart = _this3.state.canvasTimeStart;\n    var scrollX = scrollComponent.scrollLeft;\n    var zoom = _this3.state.visibleTimeEnd - _this3.state.visibleTimeStart;\n    var width = _this3.state.width;\n    var visibleTimeStart = canvasTimeStart + zoom * scrollX / width;\n\n    // move the virtual canvas if needed\n    if (scrollX < _this3.state.width * 0.5) {\n      _this3.setState({\n        canvasTimeStart: _this3.state.canvasTimeStart - zoom\n      });\n      scrollComponent.scrollLeft += _this3.state.width;\n    }\n    if (scrollX > _this3.state.width * 1.5) {\n      _this3.setState({\n        canvasTimeStart: _this3.state.canvasTimeStart + zoom\n      });\n      scrollComponent.scrollLeft -= _this3.state.width;\n    }\n\n    if (_this3.state.visibleTimeStart !== visibleTimeStart || _this3.state.visibleTimeEnd !== visibleTimeStart + zoom) {\n      _this3.props.onTimeChange.bind(_this3)(visibleTimeStart, visibleTimeStart + zoom, _this3.updateScrollCanvas);\n    }\n  };\n\n  this.updateScrollCanvas = function (visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, updatedItems, updatedGroups) {\n    var oldCanvasTimeStart = _this3.state.canvasTimeStart;\n    var oldZoom = _this3.state.visibleTimeEnd - _this3.state.visibleTimeStart;\n    var newZoom = visibleTimeEnd - visibleTimeStart;\n    var items = updatedItems || _this3.props.items;\n    var groups = updatedGroups || _this3.props.groups;\n    var fullUpdate = _this3.props.fullUpdate;\n\n\n    var newState = {\n      visibleTimeStart: visibleTimeStart,\n      visibleTimeEnd: visibleTimeEnd\n    };\n\n    var resetCanvas = false;\n\n    var canKeepCanvas = visibleTimeStart >= oldCanvasTimeStart + oldZoom * 0.5 && visibleTimeStart <= oldCanvasTimeStart + oldZoom * 1.5 && visibleTimeEnd >= oldCanvasTimeStart + oldZoom * 1.5 && visibleTimeEnd <= oldCanvasTimeStart + oldZoom * 2.5;\n\n    // if new visible time is in the right canvas area\n    if (canKeepCanvas) {\n      // but we need to update the scroll\n      var newScrollLeft = Math.round(_this3.state.width * (visibleTimeStart - oldCanvasTimeStart) / newZoom);\n      if (_this3.refs.scrollComponent.scrollLeft !== newScrollLeft) {\n        resetCanvas = true;\n      }\n    } else {\n      resetCanvas = true;\n    }\n\n    if (resetCanvas) {\n      // Todo: need to calculate new dimensions\n      newState.canvasTimeStart = visibleTimeStart - newZoom;\n      _this3.refs.scrollComponent.scrollLeft = _this3.state.width;\n\n      if (_this3.props.onBoundsChange) {\n        _this3.props.onBoundsChange(newState.canvasTimeStart, newState.canvasTimeStart + newZoom * 3);\n      }\n    }\n\n    if (resetCanvas || forceUpdateDimensions || fullUpdate) {\n      var canvasTimeStart = newState.canvasTimeStart ? newState.canvasTimeStart : oldCanvasTimeStart;\n\n      var _stackItems3 = _this3.stackItems(items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, _this3.state.width, fullUpdate),\n          dimensionItems = _stackItems3.dimensionItems,\n          height = _stackItems3.height,\n          groupHeights = _stackItems3.groupHeights,\n          groupTops = _stackItems3.groupTops;\n\n      newState.dimensionItems = dimensionItems;\n      newState.height = height;\n      newState.groupHeights = groupHeights;\n      newState.groupTops = groupTops;\n    }\n\n    _this3.setState(newState);\n  };\n\n  this.onWheel = function (e) {\n    var traditionalZoom = _this3.props.traditionalZoom;\n\n    if (e.ctrlKey) {\n      e.preventDefault();\n      var parentPosition = (0, _utils.getParentPosition)(e.currentTarget);\n      var xPosition = e.clientX - parentPosition.x;\n      _this3.changeZoom(1.0 + e.deltaY / 50, xPosition / _this3.state.width);\n    } else if (e.shiftKey) {\n      e.preventDefault();\n      var scrollComponent = _this3.refs.scrollComponent;\n      scrollComponent.scrollLeft += e.deltaY;\n    } else if (e.altKey) {\n      var _parentPosition = (0, _utils.getParentPosition)(e.currentTarget);\n      var _xPosition = e.clientX - _parentPosition.x;\n      _this3.changeZoom(1.0 + e.deltaY / 500, _xPosition / _this3.state.width);\n    } else {\n      if (_this3.props.fixedHeader === 'fixed') {\n        e.preventDefault();\n        if (e.deltaX !== 0) {\n          if (!traditionalZoom) {\n            _this3.refs.scrollComponent.scrollLeft += e.deltaX;\n          }\n        }\n        if (e.deltaY !== 0) {\n          window.scrollTo(window.pageXOffset, window.pageYOffset + e.deltaY);\n          if (traditionalZoom) {\n            var _parentPosition2 = (0, _utils.getParentPosition)(e.currentTarget);\n            var _xPosition2 = e.clientX - _parentPosition2.x;\n            _this3.changeZoom(1.0 + e.deltaY / 50, _xPosition2 / _this3.state.width);\n          }\n        }\n      }\n    }\n  };\n\n  this.showPeriod = function (from, unit) {\n    var visibleTimeStart = from.valueOf();\n    var visibleTimeEnd = (0, _moment2.default)(from).add(1, unit).valueOf();\n    var zoom = visibleTimeEnd - visibleTimeStart;\n\n    // can't zoom in more than to show one hour\n    if (zoom < 360000) {\n      return;\n    }\n\n    // clicked on the big header and already focused here, zoom out\n    if (unit !== 'year' && _this3.state.visibleTimeStart === visibleTimeStart && _this3.state.visibleTimeEnd === visibleTimeEnd) {\n      var nextUnit = (0, _utils.getNextUnit)(unit);\n\n      visibleTimeStart = from.startOf(nextUnit).valueOf();\n      visibleTimeEnd = (0, _moment2.default)(visibleTimeStart).add(1, nextUnit);\n      zoom = visibleTimeEnd - visibleTimeStart;\n    }\n\n    _this3.props.onTimeChange.bind(_this3)(visibleTimeStart, visibleTimeStart + zoom, _this3.updateScrollCanvas);\n  };\n\n  this.selectItem = function (item, clickType, e) {\n    if (_this3.state.selectedItem === item || _this3.props.itemTouchSendsClick && clickType === 'touch') {\n      if (item && _this3.props.onItemClick) {\n        _this3.props.onItemClick(item, e);\n      }\n    } else {\n      _this3.setState({ selectedItem: item });\n      if (item && _this3.props.onItemSelect) {\n        _this3.props.onItemSelect(item, e);\n      }\n    }\n  };\n\n  this.scrollAreaClick = function (e) {\n    // if not clicking on an item\n\n    if (!(0, _utils.hasSomeParentTheClass)(e.target, 'rct-item')) {\n      if (_this3.state.selectedItem) {\n        _this3.selectItem(null);\n      } else if (_this3.props.onCanvasClick) {\n        var _rowAndTimeFromEvent = _this3.rowAndTimeFromEvent(e),\n            _rowAndTimeFromEvent2 = _slicedToArray(_rowAndTimeFromEvent, 2),\n            row = _rowAndTimeFromEvent2[0],\n            time = _rowAndTimeFromEvent2[1];\n\n        if (row >= 0 && row < _this3.props.groups.length) {\n          var groupId = (0, _utils._get)(_this3.props.groups[row], _this3.props.keys.groupIdKey);\n          _this3.props.onCanvasClick(groupId, time, e);\n        }\n      }\n    }\n  };\n\n  this.dragItem = function (item, dragTime, newGroupOrder) {\n    var newGroup = _this3.props.groups[newGroupOrder];\n    var keys = _this3.props.keys;\n\n    _this3.setState({\n      draggingItem: item,\n      dragTime: dragTime,\n      newGroupOrder: newGroupOrder,\n      dragGroupTitle: newGroup ? (0, _utils._get)(newGroup, keys.groupTitleKey) : ''\n    });\n  };\n\n  this.dropItem = function (item, dragTime, newGroupOrder) {\n    _this3.setState({ draggingItem: null, dragTime: null, dragGroupTitle: null });\n    if (_this3.props.onItemMove) {\n      _this3.props.onItemMove(item, dragTime, newGroupOrder);\n    }\n  };\n\n  this.resizingItem = function (item, resizeTime, edge) {\n    _this3.setState({\n      resizingItem: item,\n      resizingEdge: edge,\n      resizeTime: resizeTime\n    });\n  };\n\n  this.resizedItem = function (item, resizeTime, edge) {\n    _this3.setState({ resizingItem: null, resizingEdge: null, resizeTime: null });\n    if (_this3.props.onItemResize) {\n      _this3.props.onItemResize(item, resizeTime, edge);\n    }\n  };\n\n  this.handleMouseDown = function (e) {\n    var topOffset = _this3.state.topOffset;\n    var pageY = e.pageY;\n    var _props5 = _this3.props,\n        headerLabelGroupHeight = _props5.headerLabelGroupHeight,\n        headerLabelHeight = _props5.headerLabelHeight;\n\n    var headerHeight = headerLabelGroupHeight + headerLabelHeight;\n\n    if (pageY - topOffset > headerHeight) {\n      _this3.setState({ isDragging: true, dragStartPosition: e.pageX, dragLastPosition: e.pageX });\n    }\n  };\n\n  this.handleMouseMove = function (e) {\n    if (_this3.state.isDragging && !_this3.state.draggingItem && !_this3.state.resizingItem) {\n      _this3.refs.scrollComponent.scrollLeft += _this3.state.dragLastPosition - e.pageX;\n      _this3.setState({ dragLastPosition: e.pageX });\n    }\n  };\n\n  this.handleMouseUp = function (e) {\n    var dragStartPosition = _this3.state.dragStartPosition;\n\n\n    if (Math.abs(dragStartPosition - e.pageX) <= _this3.props.clickTolerance) {\n      _this3.scrollAreaClick(e);\n    }\n\n    _this3.setState({ isDragging: false, dragStartPosition: null, dragLastPosition: null });\n  };\n\n  this.handleDoubleClick = function (e) {\n    var _state6 = _this3.state,\n        canvasTimeStart = _state6.canvasTimeStart,\n        width = _state6.width,\n        visibleTimeStart = _state6.visibleTimeStart,\n        visibleTimeEnd = _state6.visibleTimeEnd,\n        groupTops = _state6.groupTops,\n        topOffset = _state6.topOffset;\n\n    var zoom = visibleTimeEnd - visibleTimeStart;\n    var canvasTimeEnd = canvasTimeStart + zoom * 3;\n    var canvasWidth = width * 3;\n    var pageX = e.pageX,\n        pageY = e.pageY;\n\n    var ratio = (canvasTimeEnd - canvasTimeStart) / canvasWidth;\n    var boundingRect = _this3.refs.scrollComponent.getBoundingClientRect();\n    var timePosition = visibleTimeStart + ratio * (pageX - boundingRect.left);\n    if (_this3.props.dragSnap) {\n      timePosition = Math.round(timePosition / _this3.props.dragSnap) * _this3.props.dragSnap;\n    }\n\n    var groupIndex = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = Object.keys(groupTops)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var key = _step.value;\n\n        var item = groupTops[key];\n        if (pageY - topOffset > item) {\n          groupIndex = parseInt(key, 10);\n        } else {\n          break;\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (_this3.props.onCanvasDoubleClick) {\n      _this3.props.onCanvasDoubleClick(_this3.props.groups[groupIndex], timePosition, e);\n    }\n  };\n};\n\nexports.default = ReactCalendarTimeline;\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/Timeline.css":".react-calendar-timeline * {\n  box-sizing: border-box; }\n.react-calendar-timeline .rct-outer {\n  display: block;\n  overflow: hidden; }\n.react-calendar-timeline .rct-scroll {\n  display: inline-block;\n  vertical-align: top;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  -ms-touch-action: none;\n  touch-action: none; }\n.react-calendar-timeline .rct-canvas {\n  position: relative; }\n.react-calendar-timeline .rct-items .rct-item {\n  overflow: hidden;\n  position: absolute;\n  box-sizing: border-box;\n  font-size: 12px;\n  color: white;\n  text-align: center;\n  cursor: pointer;\n  background: #2196F3;\n  border: 1px solid #1A6FB3;\n  z-index: 1; }\n  .react-calendar-timeline .rct-items .rct-item.clipped-left {\n    border-left: 0; }\n  .react-calendar-timeline .rct-items .rct-item.clipped-right {\n    border-right: 0; }\n  .react-calendar-timeline .rct-items .rct-item.selected {\n    background: #FFC107;\n    border: 1px solid #FF9800;\n    z-index: 2; }\n    .react-calendar-timeline .rct-items .rct-item.selected.clipped-left {\n      border-left: 0; }\n    .react-calendar-timeline .rct-items .rct-item.selected.clipped-right {\n      border-right: 0; }\n    .react-calendar-timeline .rct-items .rct-item.selected.can-move {\n      cursor: move; }\n    .react-calendar-timeline .rct-items .rct-item.selected.can-resize-left {\n      border-left-width: 3px; }\n      .react-calendar-timeline .rct-items .rct-item.selected.can-resize-left .rct-drag-left {\n        cursor: w-resize; }\n    .react-calendar-timeline .rct-items .rct-item.selected.can-resize-right {\n      border-right-width: 3px; }\n      .react-calendar-timeline .rct-items .rct-item.selected.can-resize-right .rct-drag-right {\n        cursor: e-resize; }\n  .react-calendar-timeline .rct-items .rct-item .rct-drag-left {\n    position: absolute;\n    width: 24px;\n    max-width: 20%;\n    min-width: 2px;\n    height: 100%;\n    top: 0;\n    left: 0;\n    cursor: pointer;\n    z-index: 10; }\n  .react-calendar-timeline .rct-items .rct-item .rct-drag-right {\n    position: absolute;\n    width: 24px;\n    max-width: 20%;\n    min-width: 2px;\n    height: 100%;\n    top: 0;\n    right: 0;\n    cursor: pointer;\n    z-index: 10; }\n  .react-calendar-timeline .rct-items .rct-item:hover {\n    z-index: 10; }\n  .react-calendar-timeline .rct-items .rct-item .rct-item-overflow {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    padding: 0;\n    margin: 0;\n    overflow: hidden; }\n    .react-calendar-timeline .rct-items .rct-item .rct-item-overflow:hover {\n      overflow: visible;\n      z-index: 10; }\n    .react-calendar-timeline .rct-items .rct-item .rct-item-overflow .rct-item-content {\n      white-space: nowrap;\n      position: relative;\n      display: inline-block;\n      border-radius: 2px;\n      left: 0;\n      padding: 0 6px;\n      height: 100%; }\n.react-calendar-timeline .rct-header {\n  margin: 0; }\n  .react-calendar-timeline .rct-header .rct-label-group {\n    position: absolute;\n    top: 0;\n    font-size: 14px;\n    overflow: hidden;\n    text-align: center;\n    cursor: pointer;\n    border-left: 2px solid #bbb;\n    color: #ffffff;\n    background: #c52020;\n    border-bottom: 1px solid #bbb;\n    cursor: pointer; }\n  .react-calendar-timeline .rct-header .rct-label {\n    position: absolute;\n    overflow: hidden;\n    text-align: center;\n    cursor: pointer;\n    border-left: 1px solid #bbb;\n    color: #333333;\n    background: #f0f0f0;\n    border-bottom: 1px solid #bbb;\n    cursor: pointer; }\n    .react-calendar-timeline .rct-header .rct-label.rct-label-only {\n      color: #ffffff;\n      background: #c52020; }\n    .react-calendar-timeline .rct-header .rct-label.rct-first-of-type {\n      border-left: 2px solid #bbb; }\n.react-calendar-timeline .rct-sidebar {\n  overflow: hidden;\n  display: inline-block;\n  vertical-align: top;\n  position: relative;\n  box-sizing: border-box;\n  border-right: 1px solid #bbb; }\n  .react-calendar-timeline .rct-sidebar .rct-sidebar-header {\n    margin: 0;\n    color: #ffffff;\n    background: #c52020;\n    border-right: 1px solid #bbb;\n    box-sizing: 'border-box';\n    border-bottom: 1px solid #bbb;\n    overflow: 'hidden'; }\n  .react-calendar-timeline .rct-sidebar .rct-sidebar-row {\n    padding: 0 4px;\n    overflow: hidden;\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    box-sizing: content-box;\n    margin: 0;\n    border-bottom: 1px solid #bbb; }\n    .react-calendar-timeline .rct-sidebar .rct-sidebar-row.rct-sidebar-row-odd {\n      background: rgba(0, 0, 0, 0.05); }\n    .react-calendar-timeline .rct-sidebar .rct-sidebar-row.rct-sidebar-row-even {\n      background: transparent; }\n.react-calendar-timeline .rct-horizontal-lines .rct-hl-even, .react-calendar-timeline .rct-horizontal-lines .rct-hl-odd {\n  border-bottom: 1px solid #bbb;\n  box-sizing: content-box;\n  position: absolute; }\n.react-calendar-timeline .rct-horizontal-lines .rct-hl-odd {\n  background: rgba(0, 0, 0, 0.05); }\n.react-calendar-timeline .rct-horizontal-lines .rct-hl-even {\n  background: transparent; }\n.react-calendar-timeline .rct-vertical-lines .rct-vl {\n  position: absolute;\n  border-left: 1px solid #bbb;\n  background: #fff; }\n  .react-calendar-timeline .rct-vertical-lines .rct-vl.rct-vl-first {\n    border-left: 2px solid #bbb; }\n  .react-calendar-timeline .rct-vertical-lines .rct-vl.rct-day-6, .react-calendar-timeline .rct-vertical-lines .rct-vl.rct-day-0 {\n    background: rgba(250, 246, 225, 0.5); }\n.react-calendar-timeline .rct-today {\n  position: absolute;\n  width: 2px;\n  background: red; }\n.react-calendar-timeline .rct-infolabel {\n  position: fixed;\n  left: 100px;\n  bottom: 50px;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  padding: 10px;\n  font-size: 20px;\n  border-radius: 5px;\n  z-index: 5; }\n\n/*# sourceMappingURL=Timeline.css.map */\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/karma.conf.js":"module.exports = function(config) {\n  config.set({\n    basePath: '.',\n\n    frameworks: ['jasmine'],\n    browsers: ['PhantomJS'],\n\n    files: [\n      // shim to workaroud PhantomJS 1.x lack of `bind` support\n      // see: https://github.com/ariya/phantomjs/issues/10522\n      'node_modules/es5-shim/es5-shim.js',\n\n      // React is an external dependency of the component\n      'node_modules/react/dist/react-with-addons.js',\n\n      'spec/spec-helper.js',\n      'spec/**/*.spec.*',\n      { pattern: 'lib/**/*', watched: true, included: false }\n    ],\n\n    preprocessors: {\n      // add webpack as preprocessor\n      'spec/**/*.spec.*': ['webpack', 'sourcemap']\n    },\n\n    webpack: loadWebpackConfig(),\n\n    webpackServer: {\n      noInfo: true\n    },\n\n    singleRun: true\n  });\n};\n\n\n/**\n  Loads configuration while ensuring sounce-map is enabled\n */\nfunction loadWebpackConfig () {\n  var webpackConfig = require('./webpack.config.js');\n  webpackConfig.devtool = 'inline-source-map';\n  return webpackConfig;\n}\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/webpack.config.js":"var webpack = require('webpack')\nvar path = require('path')\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\n\nmodule.exports = {\n  context: __dirname,\n  entry: {\n    'react-calendar-timeline': './src/index.js'\n  },\n  output: {\n    path: path.join(__dirname, 'build/dist/'),\n    filename: '[name].js',\n    publicPath: 'build/dist/',\n    library: 'ReactCalendarTimeline',\n    libraryTarget: 'umd'\n  },\n  debug: true,\n  devtool: 'sourcemap',\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: ExtractTextPlugin.extract('style-loader', 'css-loader')\n      },\n      {\n        test: /\\.scss$/,\n        loader: ExtractTextPlugin.extract('style-loader', 'css-loader!sass-loader')\n      },\n      {\n        test: /\\.(js|jsx)$/,\n        loaders: ['babel'],\n        exclude: /node_modules/\n      }\n    ]\n  },\n  plugins: [\n    new webpack.NoErrorsPlugin(),\n    new ExtractTextPlugin('[name].css')\n  ],\n  externals: {\n    'react': 'React',\n    'react-dom': 'ReactDOM',\n    'moment': 'moment',\n    'interact.js': 'interact'\n  },\n  resolve: {\n    extensions: ['', '.js', '.jsx', '.scss', '.md']\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/webpack.config.prod.js":"var config = require('./webpack.config.js')\nvar webpack = require('webpack')\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\n\nconfig.output.filename = config.output.filename.replace('.js', '.min.js')\n\nconfig.plugins = [\n  new webpack.NoErrorsPlugin(),\n  new ExtractTextPlugin('[name].min.css'),\n  new webpack.DefinePlugin({\n    'process.env': {\n      // This has effect on the react lib size\n      NODE_ENV: JSON.stringify('production')\n    }\n  }),\n  new webpack.optimize.DedupePlugin(),\n  new webpack.optimize.UglifyJsPlugin()\n]\n\nmodule.exports = config\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/spec/spec-helper.js":"beforeEach(function() {\n\n});\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/src/index.js":"import Timeline from './lib/Timeline'\n\nexport default Timeline\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/utils.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nexports._get = _get;\nexports._length = _length;\nexports.arraysEqual = arraysEqual;\nexports.iterateTimes = iterateTimes;\nexports.getMinUnit = getMinUnit;\nexports.getNextUnit = getNextUnit;\nexports.getParentPosition = getParentPosition;\nexports.coordinateToTimeRatio = coordinateToTimeRatio;\nexports.calculateDimensions = calculateDimensions;\nexports.getGroupOrders = getGroupOrders;\nexports.getVisibleItems = getVisibleItems;\nexports.collision = collision;\nexports.stack = stack;\nexports.nostack = nostack;\nexports.keyBy = keyBy;\nexports.groupBy = groupBy;\nexports.hasSomeParentTheClass = hasSomeParentTheClass;\nexports.createGradientPattern = createGradientPattern;\nexports.deepObjectCompare = deepObjectCompare;\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar EPSILON = 0.001;\n\n// so we could use both immutable.js objects and regular objects\nfunction _get(object, key) {\n  return typeof object.get === 'function' ? object.get(key) : object[key];\n}\n\nfunction _length(object) {\n  return typeof object.count === 'function' ? object.count() : object.length;\n}\n\nfunction arraysEqual(array1, array2) {\n  return _length(array1) === _length(array2) && array1.every(function (element, index) {\n    return element === _get(array2, index);\n  });\n}\n\nfunction iterateTimes(start, end, unit, timeSteps, callback) {\n  var time = (0, _moment2.default)(start).startOf(unit);\n\n  if (timeSteps[unit] && timeSteps[unit] > 1) {\n    var value = time.get(unit);\n    time.set(unit, value - value % timeSteps[unit]);\n  }\n\n  while (time.valueOf() < end) {\n    var nextTime = (0, _moment2.default)(time).add(timeSteps[unit] || 1, unit + 's');\n    callback(time, nextTime);\n    time = nextTime;\n  }\n}\n\nfunction getMinUnit(zoom, width, timeSteps) {\n  var timeDividers = {\n    second: 1000,\n    minute: 60,\n    hour: 60,\n    day: 24,\n    month: 30,\n    year: 12\n  };\n\n  var minUnit = 'year';\n  var breakCount = zoom;\n  var minCellWidth = 17;\n\n  Object.keys(timeDividers).some(function (unit) {\n    breakCount = breakCount / timeDividers[unit];\n    var cellCount = breakCount / timeSteps[unit];\n    var countNeeded = width / (timeSteps[unit] && timeSteps[unit] > 1 ? 3 * minCellWidth : minCellWidth);\n\n    if (cellCount < countNeeded) {\n      minUnit = unit;\n      return true;\n    }\n  });\n\n  return minUnit;\n}\n\nfunction getNextUnit(unit) {\n  var nextUnits = {\n    second: 'minute',\n    minute: 'hour',\n    hour: 'day',\n    day: 'month',\n    month: 'year'\n  };\n\n  return nextUnits[unit] || '';\n}\n\nfunction getParentPosition(element) {\n  var xPosition = 0;\n  var yPosition = 0;\n  var first = true;\n\n  while (element) {\n    xPosition += element.offsetLeft - (first ? 0 : element.scrollLeft) + element.clientLeft;\n    yPosition += element.offsetTop - (first ? 0 : element.scrollTop) + element.clientTop;\n    element = element.offsetParent;\n    first = false;\n  }\n  return { x: xPosition, y: yPosition };\n}\n\nfunction coordinateToTimeRatio(canvasTimeStart, canvasTimeEnd, canvasWidth) {\n  return (canvasTimeEnd - canvasTimeStart) / canvasWidth;\n}\n\nfunction calculateDimensions(_ref) {\n  var item = _ref.item,\n      order = _ref.order,\n      keys = _ref.keys,\n      canvasTimeStart = _ref.canvasTimeStart,\n      canvasTimeEnd = _ref.canvasTimeEnd,\n      canvasWidth = _ref.canvasWidth,\n      dragSnap = _ref.dragSnap,\n      lineHeight = _ref.lineHeight,\n      draggingItem = _ref.draggingItem,\n      dragTime = _ref.dragTime,\n      resizingItem = _ref.resizingItem,\n      resizingEdge = _ref.resizingEdge,\n      resizeTime = _ref.resizeTime,\n      newGroupOrder = _ref.newGroupOrder,\n      itemHeightRatio = _ref.itemHeightRatio,\n      fullUpdate = _ref.fullUpdate,\n      visibleTimeStart = _ref.visibleTimeStart,\n      visibleTimeEnd = _ref.visibleTimeEnd;\n\n  var itemId = _get(item, keys.itemIdKey);\n  var itemTimeStart = _get(item, keys.itemTimeStartKey);\n  var itemTimeEnd = _get(item, keys.itemTimeEndKey);\n\n  var isDragging = itemId === draggingItem;\n  var isResizing = itemId === resizingItem;\n\n  var itemStart = isResizing && resizingEdge === 'left' ? resizeTime : itemTimeStart;\n  var itemEnd = isResizing && resizingEdge === 'right' ? resizeTime : itemTimeEnd;\n\n  var x = isDragging ? dragTime : itemStart;\n\n  var w = Math.max(itemEnd - itemStart, dragSnap);\n\n  var collisionX = itemStart;\n  var collisionW = w;\n\n  if (isDragging) {\n    if (itemTimeStart >= dragTime) {\n      collisionX = dragTime;\n      collisionW = Math.max(itemTimeEnd - dragTime, dragSnap);\n    } else {\n      collisionW = Math.max(dragTime - itemTimeStart + w, dragSnap);\n    }\n  }\n\n  var clippedLeft = false;\n  var clippedRight = false;\n\n  if (fullUpdate) {\n    if (!isDragging && (visibleTimeStart > x + w || visibleTimeEnd < x)) {\n      return null;\n    }\n\n    if (visibleTimeStart > x) {\n      w -= visibleTimeStart - x;\n      x = visibleTimeStart;\n      if (isDragging && w < 0) {\n        x += w;\n        w = 0;\n      }\n      clippedLeft = true;\n    }\n    if (x + w > visibleTimeEnd) {\n      w -= x + w - visibleTimeEnd;\n      clippedRight = true;\n    }\n  }\n\n  var ratio = 1 / coordinateToTimeRatio(canvasTimeStart, canvasTimeEnd, canvasWidth);\n  var h = lineHeight * itemHeightRatio;\n\n  var dimensions = {\n    left: (x - canvasTimeStart) * ratio,\n    top: null,\n    width: Math.max(w * ratio, 3),\n    height: h,\n    order: isDragging ? newGroupOrder : order,\n    stack: true,\n    collisionLeft: collisionX,\n    originalLeft: itemTimeStart,\n    collisionWidth: collisionW,\n    lineHeight: lineHeight,\n    isDragging: isDragging,\n    clippedLeft: clippedLeft,\n    clippedRight: clippedRight\n  };\n\n  return dimensions;\n}\n\nfunction getGroupOrders(groups, keys) {\n  var groupIdKey = keys.groupIdKey;\n\n\n  var groupOrders = {};\n\n  for (var i = 0; i < groups.length; i++) {\n    groupOrders[_get(groups[i], groupIdKey)] = i;\n  }\n\n  return groupOrders;\n}\n\nfunction getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys) {\n  var itemTimeStartKey = keys.itemTimeStartKey,\n      itemTimeEndKey = keys.itemTimeEndKey;\n\n\n  return items.filter(function (item) {\n    return _get(item, itemTimeStartKey) <= canvasTimeEnd && _get(item, itemTimeEndKey) >= canvasTimeStart;\n  });\n}\n\nfunction collision(a, b, lineHeight) {\n  // var verticalMargin = (lineHeight - a.height)/2;\n  var verticalMargin = 0;\n  return a.collisionLeft + EPSILON < b.collisionLeft + b.collisionWidth && a.collisionLeft + a.collisionWidth - EPSILON > b.collisionLeft && a.top - verticalMargin + EPSILON < b.top + b.height && a.top + a.height + verticalMargin - EPSILON > b.top;\n}\n\nfunction stack(items, groupOrders, lineHeight, headerHeight, force) {\n  var i, iMax;\n\n  var totalHeight = headerHeight;\n\n  var groupHeights = {};\n  var groupTops = {};\n\n  var groupedItems = groupBy(items, function (item) {\n    return item.dimensions.order;\n  });\n\n  if (force) {\n    // reset top position of all items\n    for (i = 0, iMax = items.length; i < iMax; i++) {\n      items[i].dimensions.top = null;\n    }\n  }\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.keys(groupOrders)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var url = _step.value;\n\n      var key = groupOrders[url];\n      // calculate new, non-overlapping positions\n      var group = groupedItems[key] || [];\n\n      groupTops[key] = totalHeight;\n\n      var groupHeight = 0;\n      var verticalMargin = 0;\n      for (i = 0, iMax = group.length; i < iMax; i++) {\n        var item = group[i];\n        verticalMargin = item.dimensions.lineHeight - item.dimensions.height;\n\n        if (item.dimensions.stack && item.dimensions.top === null) {\n          item.dimensions.top = totalHeight + verticalMargin;\n          groupHeight = Math.max(groupHeight, item.dimensions.lineHeight);\n          do {\n            var collidingItem = null;\n            for (var j = 0, jj = group.length; j < jj; j++) {\n              var other = group[j];\n              if (other.top !== null && other !== item && other.dimensions.stack && collision(item.dimensions, other.dimensions, item.dimensions.lineHeight)) {\n                collidingItem = other;\n                break;\n              } else {\n                // console.log('dont test', other.top !== null, other !== item, other.stack);\n              }\n            }\n\n            if (collidingItem != null) {\n              // There is a collision. Reposition the items above the colliding element\n              item.dimensions.top = collidingItem.dimensions.top + collidingItem.dimensions.lineHeight;\n              groupHeight = Math.max(groupHeight, item.dimensions.top + item.dimensions.height - totalHeight);\n            }\n          } while (collidingItem);\n        }\n      }\n      groupHeights[key] = Math.max(groupHeight + verticalMargin, lineHeight);\n      totalHeight += Math.max(groupHeight + verticalMargin, lineHeight);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return {\n    height: totalHeight,\n    groupHeights: groupHeights,\n    groupTops: groupTops\n  };\n}\n\nfunction nostack(items, groupOrders, lineHeight, headerHeight, force) {\n  var i, iMax;\n\n  var totalHeight = headerHeight;\n\n  var groupHeights = {};\n  var groupTops = {};\n\n  var groupedItems = groupBy(items, function (item) {\n    return item.dimensions.order;\n  });\n\n  if (force) {\n    // reset top position of all items\n    for (i = 0, iMax = items.length; i < iMax; i++) {\n      items[i].dimensions.top = null;\n    }\n  }\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = Object.keys(groupOrders)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var url = _step2.value;\n\n      var key = groupOrders[url];\n      // calculate new, non-overlapping positions\n      var group = groupedItems[key] || [];\n\n      groupTops[key] = totalHeight;\n\n      var groupHeight = 0;\n      for (i = 0, iMax = group.length; i < iMax; i++) {\n        var item = group[i];\n        var verticalMargin = (item.dimensions.lineHeight - item.dimensions.height) / 2;\n\n        if (item.dimensions.top === null) {\n          item.dimensions.top = totalHeight + verticalMargin;\n          groupHeight = Math.max(groupHeight, item.dimensions.lineHeight);\n        }\n      }\n      groupHeights[key] = Math.max(groupHeight, lineHeight);\n      totalHeight += Math.max(groupHeight, lineHeight);\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return {\n    height: totalHeight,\n    groupHeights: groupHeights,\n    groupTops: groupTops\n  };\n}\n\nfunction keyBy(value, key) {\n  var obj = {};\n\n  value.forEach(function (element, index, array) {\n    obj[element[key]] = element;\n  });\n\n  return obj;\n}\n\nfunction groupBy(collection, groupFunction) {\n  var obj = {};\n\n  collection.forEach(function (element, index, array) {\n    var key = groupFunction(element);\n    if (!obj[key]) {\n      obj[key] = [];\n    }\n    obj[key].push(element);\n  });\n\n  return obj;\n}\n\nfunction hasSomeParentTheClass(element, classname) {\n  if (element.className && element.className.split(' ').indexOf(classname) >= 0) return true;\n  return element.parentNode && hasSomeParentTheClass(element.parentNode, classname);\n}\n\nfunction createGradientPattern(lineHeight, color1, color2, borderColor) {\n  if (borderColor) {\n    if (!color2 || color1 === color2) {\n      return 'repeating-linear-gradient(to bottom, ' + (color1 + ',') + (color1 + ' ' + (lineHeight - 1) + 'px,') + (borderColor + ' ' + (lineHeight - 1) + 'px,') + (borderColor + ' ' + lineHeight + 'px') + ')';\n    } else {\n      return 'repeating-linear-gradient(to bottom, ' + (color1 + ',') + (color1 + ' ' + (lineHeight - 1) + 'px,') + (borderColor + ' ' + (lineHeight - 1) + 'px,') + (borderColor + ' ' + lineHeight + 'px,') + (color2 + ' ' + lineHeight + 'px,') + (color2 + ' ' + (lineHeight * 2 - 1) + 'px,') + (borderColor + ' ' + (lineHeight * 2 - 1) + 'px,') + (borderColor + ' ' + lineHeight * 2 + 'px') + ')';\n    }\n  } else {\n    if (!color2 || color1 === color2) {\n      return color1;\n    } else {\n      return 'repeating-linear-gradient(to bottom,' + color1 + ',' + color1 + ' ' + lineHeight + 'px,' + color2 + ' ' + lineHeight + 'px,' + color2 + ' ' + lineHeight * 2 + 'px)';\n    }\n  }\n}\n\nfunction deepObjectCompare(obj1, obj2) {\n  for (var p in obj1) {\n    if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;\n\n    switch (_typeof(obj1[p])) {\n      case 'object':\n        if (!Object.compare(obj1[p], obj2[p])) return false;\n        break;\n      case 'function':\n        if (typeof obj2[p] === 'undefined' || p !== 'compare' && obj1[p].toString() !== obj2[p].toString()) return false;\n        break;\n      default:\n        if (obj1[p] !== obj2[p]) return false;\n    }\n  }\n\n  for (var r in obj2) {\n    if (typeof obj1[r] === 'undefined') return false;\n  }\n  return true;\n};","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/src/lib/Timeline.js":"import React, { Component, PropTypes } from 'react'\nimport moment from 'moment'\nimport './Timeline.scss'\n\nimport Items from './items/Items'\nimport InfoLabel from './layout/InfoLabel'\nimport Sidebar from './layout/Sidebar'\nimport Header from './layout/Header'\nimport VerticalLines from './lines/VerticalLines'\nimport HorizontalLines from './lines/HorizontalLines'\nimport TodayLine from './lines/TodayLine'\n\nimport { getMinUnit, getNextUnit, getParentPosition, _get, _length, stack, nostack, calculateDimensions, getGroupOrders, getVisibleItems, hasSomeParentTheClass } from './utils.js'\n\nconst defaultKeys = {\n  groupIdKey: 'id',\n  groupTitleKey: 'title',\n  itemIdKey: 'id',\n  itemTitleKey: 'title',\n  itemDivTitleKey: 'title',\n  itemGroupKey: 'group',\n  itemTimeStartKey: 'start_time',\n  itemTimeEndKey: 'end_time'\n}\n\nconst defaultTimeSteps = {\n  second: 1,\n  minute: 1,\n  hour: 1,\n  day: 1,\n  month: 1,\n  year: 1\n}\n\nexport default class ReactCalendarTimeline extends Component {\n  static propTypes = {\n    groups: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n    items: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n    sidebarWidth: PropTypes.number,\n    dragSnap: PropTypes.number,\n    minResizeWidth: PropTypes.number,\n    fixedHeader: PropTypes.oneOf(['fixed', 'absolute', 'none']),\n    fullUpdate: PropTypes.bool,\n    zIndexStart: PropTypes.number,\n    lineHeight: PropTypes.number,\n    headerLabelGroupHeight: PropTypes.number,\n    headerLabelHeight: PropTypes.number,\n    itemHeightRatio: PropTypes.number,\n\n    minZoom: PropTypes.number,\n    maxZoom: PropTypes.number,\n\n    clickTolerance: PropTypes.number,\n\n    canChangeGroup: PropTypes.bool,\n    canMove: PropTypes.bool,\n    canResize: PropTypes.oneOf([true, false, 'left', 'right', 'both']),\n    useResizeHandle: PropTypes.bool,\n    canSelect: PropTypes.bool,\n\n    stackItems: PropTypes.bool,\n\n    traditionalZoom: PropTypes.bool,\n\n    itemTouchSendsClick: PropTypes.bool,\n\n    onItemMove: PropTypes.func,\n    onItemResize: PropTypes.func,\n    onItemClick: PropTypes.func,\n    onItemSelect: PropTypes.func,\n    onCanvasClick: PropTypes.func,\n    onItemDoubleClick: PropTypes.func,\n    onItemContextMenu: PropTypes.func,\n    onCanvasDoubleClick: PropTypes.func,\n\n    moveResizeValidator: PropTypes.func,\n\n    dayBackground: PropTypes.func,\n\n    style: PropTypes.object,\n    keys: PropTypes.object,\n\n    timeSteps: PropTypes.object,\n\n    defaultTimeStart: PropTypes.object,\n    defaultTimeEnd: PropTypes.object,\n\n    visibleTimeStart: PropTypes.number,\n    visibleTimeEnd: PropTypes.number,\n    onTimeChange: PropTypes.func,\n    onTimeInit: PropTypes.func,\n    onBoundsChange: PropTypes.func,\n\n    children: PropTypes.node\n  }\n\n  static defaultProps = {\n    sidebarWidth: 150,\n    dragSnap: 1000 * 60 * 15, // 15min\n    minResizeWidth: 20,\n    fixedHeader: 'none', // fixed or absolute or none\n    fullUpdate: true,\n    zIndexStart: 10,\n    lineHeight: 30,\n    headerLabelGroupHeight: 30,\n    headerLabelHeight: 30,\n    itemHeightRatio: 0.65,\n\n    minZoom: 60 * 60 * 1000, // 1 hour\n    maxZoom: 5 * 365.24 * 86400 * 1000, // 5 years\n\n    clickTolerance: 3, // how many pixels can we drag for it to be still considered a click?\n\n    canChangeGroup: true,\n    canMove: true,\n    canResize: 'right',\n    useResizeHandle: false,\n    canSelect: true,\n\n    stackItems: false,\n\n    traditionalZoom: false,\n\n    onItemMove: null,\n    onItemResize: null,\n    onItemClick: null,\n    onItemSelect: null,\n    onCanvasClick: null,\n    onItemDoubleClick: null,\n    onItemContextMenu: null,\n\n    moveResizeValidator: null,\n\n    dayBackground: null,\n\n    defaultTimeStart: null,\n    defaultTimeEnd: null,\n\n    itemTouchSendsClick: false,\n\n    style: {},\n    keys: defaultKeys,\n    timeSteps: defaultTimeSteps,\n\n    // if you pass in visibleTimeStart and visibleTimeEnd, you must also pass onTimeChange(visibleTimeStart, visibleTimeEnd),\n    // which needs to update the props visibleTimeStart and visibleTimeEnd to the ones passed\n    visibleTimeStart: null,\n    visibleTimeEnd: null,\n    onTimeChange: function (visibleTimeStart, visibleTimeEnd, updateScrollCanvas) {\n      updateScrollCanvas(visibleTimeStart, visibleTimeEnd)\n    },\n    // called after the calendar loads and the visible time has been calculated\n    onTimeInit: null,\n    // called when the canvas area of the calendar changes\n    onBoundsChange: null,\n    children: null\n  }\n\n  constructor (props) {\n    super(props)\n\n    let visibleTimeStart = null\n    let visibleTimeEnd = null\n\n    if (this.props.defaultTimeStart && this.props.defaultTimeEnd) {\n      visibleTimeStart = this.props.defaultTimeStart.valueOf()\n      visibleTimeEnd = this.props.defaultTimeEnd.valueOf()\n    } else if (this.props.visibleTimeStart && this.props.visibleTimeEnd) {\n      visibleTimeStart = this.props.visibleTimeStart\n      visibleTimeEnd = this.props.visibleTimeEnd\n    } else {\n      visibleTimeStart = Math.min(...this.props.items.map(item => _get(item, 'start').getTime()))\n      visibleTimeEnd = Math.max(...this.props.items.map(item => _get(item, 'end').getTime()))\n\n      if (!visibleTimeStart || !visibleTimeEnd) {\n        visibleTimeStart = new Date().getTime() - 86400 * 7 * 1000\n        visibleTimeEnd = new Date().getTime() + 86400 * 7 * 1000\n      }\n\n      if (this.props.onTimeInit) {\n        this.props.onTimeInit(visibleTimeStart, visibleTimeEnd)\n      }\n    }\n\n    this.state = {\n      width: 1000,\n\n      visibleTimeStart: visibleTimeStart,\n      visibleTimeEnd: visibleTimeEnd,\n      canvasTimeStart: visibleTimeStart - (visibleTimeEnd - visibleTimeStart),\n\n      selectedItem: null,\n      dragTime: null,\n      dragGroupTitle: null,\n      resizeTime: null,\n      isDragging: false,\n      topOffset: 0,\n      resizingItem: null,\n      resizingEdge: null\n    }\n\n    const {\n      dimensionItems, height, groupHeights, groupTops\n    } = this.stackItems(props.items, props.groups, this.state.canvasTimeStart, this.state.visibleTimeStart, this.state.visibleTimeEnd, this.state.width)\n\n    this.state.dimensionItems = dimensionItems\n    this.state.height = height\n    this.state.groupHeights = groupHeights\n    this.state.groupTops = groupTops\n  }\n\n  componentDidMount () {\n    this.resize()\n\n    this.resizeEventListener = {\n      handleEvent: (event) => {\n        this.resize()\n      }\n    }\n\n    window.addEventListener('resize', this.resizeEventListener)\n\n    this.lastTouchDistance = null\n\n    this.refs.scrollComponent.addEventListener('touchstart', this.touchStart)\n    this.refs.scrollComponent.addEventListener('touchmove', this.touchMove)\n    this.refs.scrollComponent.addEventListener('touchend', this.touchEnd)\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.resizeEventListener)\n    this.refs.scrollComponent.removeEventListener('touchstart', this.touchStart)\n    this.refs.scrollComponent.removeEventListener('touchmove', this.touchMove)\n    this.refs.scrollComponent.removeEventListener('touchend', this.touchEnd)\n  }\n\n  touchStart = (e) => {\n    if (e.touches.length === 2) {\n      e.preventDefault()\n\n      this.lastTouchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX)\n      this.singleTouchStart = null\n      this.lastSingleTouch = null\n    } else if (e.touches.length === 1 && this.props.fixedHeader === 'fixed') {\n      e.preventDefault()\n\n      let x = e.touches[0].clientX\n      let y = e.touches[0].clientY\n\n      this.lastTouchDistance = null\n      this.singleTouchStart = {x: x, y: y, screenY: window.pageYOffset}\n      this.lastSingleTouch = {x: x, y: y, screenY: window.pageYOffset}\n    }\n  }\n\n  touchMove = (e) => {\n    if (this.state.dragTime || this.state.resizeTime) {\n      e.preventDefault()\n      return\n    }\n    if (this.lastTouchDistance && e.touches.length === 2) {\n      e.preventDefault()\n\n      let touchDistance = Math.abs(e.touches[0].screenX - e.touches[1].screenX)\n\n      let parentPosition = getParentPosition(e.currentTarget)\n      let xPosition = (e.touches[0].screenX + e.touches[1].screenX) / 2 - parentPosition.x\n\n      if (touchDistance !== 0 && this.lastTouchDistance !== 0) {\n        this.changeZoom(this.lastTouchDistance / touchDistance, xPosition / this.state.width)\n        this.lastTouchDistance = touchDistance\n      }\n    } else if (this.lastSingleTouch && e.touches.length === 1 && this.props.fixedHeader === 'fixed') {\n      e.preventDefault()\n\n      let x = e.touches[0].clientX\n      let y = e.touches[0].clientY\n\n      let deltaX = x - this.lastSingleTouch.x\n      // let deltaY = y - this.lastSingleTouch.y\n\n      let deltaX0 = x - this.singleTouchStart.x\n      let deltaY0 = y - this.singleTouchStart.y\n\n      this.lastSingleTouch = {x: x, y: y}\n\n      let moveX = Math.abs(deltaX0) * 3 > Math.abs(deltaY0)\n      let moveY = Math.abs(deltaY0) * 3 > Math.abs(deltaX0)\n\n      if (deltaX !== 0 && moveX) {\n        this.refs.scrollComponent.scrollLeft -= deltaX\n      }\n      if (moveY) {\n        window.scrollTo(window.pageXOffset, this.singleTouchStart.screenY - deltaY0)\n      }\n    }\n  }\n\n  touchEnd = (e) => {\n    if (this.lastTouchDistance) {\n      e.preventDefault()\n\n      this.lastTouchDistance = null\n    }\n    if (this.lastSingleTouch) {\n      e.preventDefault()\n\n      this.lastSingleTouch = null\n      this.singleTouchStart = null\n    }\n  }\n\n  resize () {\n    // FIXME currently when the component creates a scroll the scrollbar is not used in the initial width calculation, resizing fixes this\n    const {width: containerWidth, top: containerTop} = this.refs.container.getBoundingClientRect()\n    let width = containerWidth - this.props.sidebarWidth\n\n    const {\n      dimensionItems, height, groupHeights, groupTops\n    } = this.stackItems(this.props.items, this.props.groups, this.state.canvasTimeStart, this.state.visibleTimeStart, this.state.visibleTimeEnd, width)\n\n    this.setState({\n      width: width,\n      topOffset: containerTop + window.pageYOffset,\n      dimensionItems: dimensionItems,\n      height: height,\n      groupHeights: groupHeights,\n      groupTops: groupTops\n    })\n    this.refs.scrollComponent.scrollLeft = width\n  }\n\n  onScroll = () => {\n    const scrollComponent = this.refs.scrollComponent\n    const canvasTimeStart = this.state.canvasTimeStart\n    const scrollX = scrollComponent.scrollLeft\n    const zoom = this.state.visibleTimeEnd - this.state.visibleTimeStart\n    const width = this.state.width\n    const visibleTimeStart = canvasTimeStart + (zoom * scrollX / width)\n\n    // move the virtual canvas if needed\n    if (scrollX < this.state.width * 0.5) {\n      this.setState({\n        canvasTimeStart: this.state.canvasTimeStart - zoom\n      })\n      scrollComponent.scrollLeft += this.state.width\n    }\n    if (scrollX > this.state.width * 1.5) {\n      this.setState({\n        canvasTimeStart: this.state.canvasTimeStart + zoom\n      })\n      scrollComponent.scrollLeft -= this.state.width\n    }\n\n    if (this.state.visibleTimeStart !== visibleTimeStart || this.state.visibleTimeEnd !== visibleTimeStart + zoom) {\n      this.props.onTimeChange.bind(this)(visibleTimeStart, visibleTimeStart + zoom, this.updateScrollCanvas)\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    const { visibleTimeStart, visibleTimeEnd, items, groups } = nextProps\n\n    if (visibleTimeStart && visibleTimeEnd) {\n      this.updateScrollCanvas(visibleTimeStart, visibleTimeEnd, items !== this.props.items || groups !== this.props.groups, items, groups)\n    }\n\n    if (items !== this.props.items || groups !== this.props.groups) {\n      this.updateDimensions(items, groups)\n    }\n  }\n\n  updateDimensions (items, groups) {\n    const { canvasTimeStart, visibleTimeStart, visibleTimeEnd, width } = this.state\n    const {\n      dimensionItems, height, groupHeights, groupTops\n    } = this.stackItems(items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, width)\n\n    this.setState({ dimensionItems, height, groupHeights, groupTops })\n  }\n\n  // called when the visible time changes\n  updateScrollCanvas = (visibleTimeStart, visibleTimeEnd, forceUpdateDimensions, updatedItems, updatedGroups) => {\n    const oldCanvasTimeStart = this.state.canvasTimeStart\n    const oldZoom = this.state.visibleTimeEnd - this.state.visibleTimeStart\n    const newZoom = visibleTimeEnd - visibleTimeStart\n    const items = updatedItems || this.props.items\n    const groups = updatedGroups || this.props.groups\n    const { fullUpdate } = this.props\n\n    let newState = {\n      visibleTimeStart: visibleTimeStart,\n      visibleTimeEnd: visibleTimeEnd\n    }\n\n    let resetCanvas = false\n\n    const canKeepCanvas = visibleTimeStart >= oldCanvasTimeStart + oldZoom * 0.5 &&\n                          visibleTimeStart <= oldCanvasTimeStart + oldZoom * 1.5 &&\n                          visibleTimeEnd >= oldCanvasTimeStart + oldZoom * 1.5 &&\n                          visibleTimeEnd <= oldCanvasTimeStart + oldZoom * 2.5\n\n    // if new visible time is in the right canvas area\n    if (canKeepCanvas) {\n      // but we need to update the scroll\n      const newScrollLeft = Math.round(this.state.width * (visibleTimeStart - oldCanvasTimeStart) / newZoom)\n      if (this.refs.scrollComponent.scrollLeft !== newScrollLeft) {\n        resetCanvas = true\n      }\n    } else {\n      resetCanvas = true\n    }\n\n    if (resetCanvas) {\n      // Todo: need to calculate new dimensions\n      newState.canvasTimeStart = visibleTimeStart - newZoom\n      this.refs.scrollComponent.scrollLeft = this.state.width\n\n      if (this.props.onBoundsChange) {\n        this.props.onBoundsChange(newState.canvasTimeStart, newState.canvasTimeStart + newZoom * 3)\n      }\n    }\n\n    if (resetCanvas || forceUpdateDimensions || fullUpdate) {\n      const canvasTimeStart = newState.canvasTimeStart ? newState.canvasTimeStart : oldCanvasTimeStart\n      const {\n        dimensionItems, height, groupHeights, groupTops\n      } = this.stackItems(items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, this.state.width, fullUpdate)\n      newState.dimensionItems = dimensionItems\n      newState.height = height\n      newState.groupHeights = groupHeights\n      newState.groupTops = groupTops\n    }\n\n    this.setState(newState)\n  }\n\n  onWheel = (e) => {\n    const { traditionalZoom } = this.props\n    if (e.ctrlKey) {\n      e.preventDefault()\n      const parentPosition = getParentPosition(e.currentTarget)\n      const xPosition = e.clientX - parentPosition.x\n      this.changeZoom(1.0 + e.deltaY / 50, xPosition / this.state.width)\n    } else if (e.shiftKey) {\n      e.preventDefault()\n      const scrollComponent = this.refs.scrollComponent\n      scrollComponent.scrollLeft += e.deltaY\n    } else if (e.altKey) {\n      const parentPosition = getParentPosition(e.currentTarget)\n      const xPosition = e.clientX - parentPosition.x\n      this.changeZoom(1.0 + e.deltaY / 500, xPosition / this.state.width)\n    } else {\n      if (this.props.fixedHeader === 'fixed') {\n        e.preventDefault()\n        if (e.deltaX !== 0) {\n          if (!traditionalZoom) {\n            this.refs.scrollComponent.scrollLeft += e.deltaX\n          }\n        }\n        if (e.deltaY !== 0) {\n          window.scrollTo(window.pageXOffset, window.pageYOffset + e.deltaY)\n          if (traditionalZoom) {\n            const parentPosition = getParentPosition(e.currentTarget)\n            const xPosition = e.clientX - parentPosition.x\n            this.changeZoom(1.0 + e.deltaY / 50, xPosition / this.state.width)\n          }\n        }\n      }\n    }\n  }\n\n  zoomIn (e) {\n    e.preventDefault()\n\n    this.changeZoom(0.75)\n  }\n\n  zoomOut (e) {\n    e.preventDefault()\n\n    this.changeZoom(1.25)\n  }\n\n  changeZoom (scale, offset = 0.5) {\n    const { minZoom, maxZoom } = this.props\n    const oldZoom = this.state.visibleTimeEnd - this.state.visibleTimeStart\n    const newZoom = Math.min(Math.max(Math.round(oldZoom * scale), minZoom), maxZoom) // min 1 min, max 20 years\n    const newVisibleTimeStart = Math.round(this.state.visibleTimeStart + (oldZoom - newZoom) * offset)\n\n    this.props.onTimeChange.bind(this)(newVisibleTimeStart, newVisibleTimeStart + newZoom, this.updateScrollCanvas)\n  }\n\n  showPeriod = (from, unit) => {\n    let visibleTimeStart = from.valueOf()\n    let visibleTimeEnd = moment(from).add(1, unit).valueOf()\n    let zoom = visibleTimeEnd - visibleTimeStart\n\n    // can't zoom in more than to show one hour\n    if (zoom < 360000) {\n      return\n    }\n\n    // clicked on the big header and already focused here, zoom out\n    if (unit !== 'year' && this.state.visibleTimeStart === visibleTimeStart && this.state.visibleTimeEnd === visibleTimeEnd) {\n      let nextUnit = getNextUnit(unit)\n\n      visibleTimeStart = from.startOf(nextUnit).valueOf()\n      visibleTimeEnd = moment(visibleTimeStart).add(1, nextUnit)\n      zoom = visibleTimeEnd - visibleTimeStart\n    }\n\n    this.props.onTimeChange.bind(this)(visibleTimeStart, visibleTimeStart + zoom, this.updateScrollCanvas)\n  }\n\n  selectItem = (item, clickType, e) => {\n    if (this.state.selectedItem === item || (this.props.itemTouchSendsClick && clickType === 'touch')) {\n      if (item && this.props.onItemClick) {\n        this.props.onItemClick(item, e)\n      }\n    } else {\n      this.setState({selectedItem: item})\n      if (item && this.props.onItemSelect) {\n        this.props.onItemSelect(item, e)\n      }\n    }\n  }\n\n  rowAndTimeFromEvent (e) {\n    const { lineHeight, dragSnap } = this.props\n    const { width, visibleTimeStart, visibleTimeEnd } = this.state\n\n    const parentPosition = getParentPosition(e.currentTarget)\n    const x = e.clientX - parentPosition.x\n    const y = e.clientY - parentPosition.y\n\n    const row = Math.floor((y - (lineHeight * 2)) / lineHeight)\n    let time = Math.round(visibleTimeStart + x / width * (visibleTimeEnd - visibleTimeStart))\n    time = Math.floor(time / dragSnap) * dragSnap\n\n    return [row, time]\n  }\n\n  scrollAreaClick = (e) => {\n    // if not clicking on an item\n\n    if (!hasSomeParentTheClass(e.target, 'rct-item')) {\n      if (this.state.selectedItem) {\n        this.selectItem(null)\n      } else if (this.props.onCanvasClick) {\n        const [row, time] = this.rowAndTimeFromEvent(e)\n        if (row >= 0 && row < this.props.groups.length) {\n          const groupId = _get(this.props.groups[row], this.props.keys.groupIdKey)\n          this.props.onCanvasClick(groupId, time, e)\n        }\n      }\n    }\n  }\n\n  dragItem = (item, dragTime, newGroupOrder) => {\n    let newGroup = this.props.groups[newGroupOrder]\n    const keys = this.props.keys\n\n    this.setState({\n      draggingItem: item,\n      dragTime: dragTime,\n      newGroupOrder: newGroupOrder,\n      dragGroupTitle: newGroup ? _get(newGroup, keys.groupTitleKey) : ''\n    })\n  }\n\n  dropItem = (item, dragTime, newGroupOrder) => {\n    this.setState({draggingItem: null, dragTime: null, dragGroupTitle: null})\n    if (this.props.onItemMove) {\n      this.props.onItemMove(item, dragTime, newGroupOrder)\n    }\n  }\n\n  resizingItem = (item, resizeTime, edge) => {\n    this.setState({\n      resizingItem: item,\n      resizingEdge: edge,\n      resizeTime: resizeTime\n    })\n  }\n\n  resizedItem = (item, resizeTime, edge) => {\n    this.setState({resizingItem: null, resizingEdge: null, resizeTime: null})\n    if (this.props.onItemResize) {\n      this.props.onItemResize(item, resizeTime, edge)\n    }\n  }\n\n  handleMouseDown = (e) => {\n    const { topOffset } = this.state\n    const { pageY } = e\n    const { headerLabelGroupHeight, headerLabelHeight } = this.props\n    const headerHeight = headerLabelGroupHeight + headerLabelHeight\n\n    if (pageY - topOffset > headerHeight) {\n      this.setState({isDragging: true, dragStartPosition: e.pageX, dragLastPosition: e.pageX})\n    }\n  }\n\n  handleMouseMove = (e) => {\n    if (this.state.isDragging && !this.state.draggingItem && !this.state.resizingItem) {\n      this.refs.scrollComponent.scrollLeft += this.state.dragLastPosition - e.pageX\n      this.setState({dragLastPosition: e.pageX})\n    }\n  }\n\n  handleMouseUp = (e) => {\n    const { dragStartPosition } = this.state\n\n    if (Math.abs(dragStartPosition - e.pageX) <= this.props.clickTolerance) {\n      this.scrollAreaClick(e)\n    }\n\n    this.setState({isDragging: false, dragStartPosition: null, dragLastPosition: null})\n  }\n\n  todayLine (canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, height, headerHeight) {\n    return (\n      <TodayLine canvasTimeStart={canvasTimeStart}\n                 canvasTimeEnd={canvasTimeEnd}\n                 canvasWidth={canvasWidth}\n                 lineHeight={this.props.lineHeight}\n                 lineCount={_length(this.props.groups)}\n                 height={height}\n                 headerHeight={headerHeight}\n      />\n    )\n  }\n\n  verticalLines (canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height, headerHeight) {\n    return (\n      <VerticalLines canvasTimeStart={canvasTimeStart}\n                     canvasTimeEnd={canvasTimeEnd}\n                     canvasWidth={canvasWidth}\n                     lineHeight={this.props.lineHeight}\n                     lineCount={_length(this.props.groups)}\n                     minUnit={minUnit}\n                     timeSteps={timeSteps}\n                     fixedHeader={this.props.fixedHeader}\n                     height={height}\n                     headerHeight={headerHeight}\n      />\n    )\n  }\n\n  horizontalLines (canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, groupHeights, headerHeight) {\n    return (\n      <HorizontalLines canvasWidth={canvasWidth}\n                       lineHeight={this.props.lineHeight}\n                       lineCount={_length(this.props.groups)}\n                       groups={this.props.groups}\n                       groupHeights={groupHeights}\n                       headerHeight={headerHeight}\n      />\n    )\n  }\n\n  items (canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops) {\n    return (\n      <Items canvasTimeStart={canvasTimeStart}\n             canvasTimeEnd={canvasTimeEnd}\n             canvasWidth={canvasWidth}\n             lineHeight={this.props.lineHeight}\n             lineCount={_length(this.props.groups)}\n             dimensionItems={dimensionItems}\n             minUnit={minUnit}\n             groupHeights={groupHeights}\n             groupTops={groupTops}\n             items={this.props.items}\n             groups={this.props.groups}\n             keys={this.props.keys}\n             selectedItem={this.state.selectedItem}\n             dragSnap={this.props.dragSnap}\n             minResizeWidth={this.props.minResizeWidth}\n             canChangeGroup={this.props.canChangeGroup}\n             canMove={this.props.canMove}\n             canResize={this.props.canResize}\n             useResizeHandle={this.props.useResizeHandle}\n             canSelect={this.props.canSelect}\n             moveResizeValidator={this.props.moveResizeValidator}\n             topOffset={this.state.topOffset}\n             itemSelect={this.selectItem}\n             itemDrag={this.dragItem}\n             itemDrop={this.dropItem}\n             onItemDoubleClick={this.props.onItemDoubleClick}\n             onItemContextMenu={this.props.onItemContextMenu}\n             itemResizing={this.resizingItem}\n             itemResized={this.resizedItem} />\n    )\n  }\n\n  infoLabel () {\n    let label = null\n\n    if (this.state.dragTime) {\n      label = `${moment(this.state.dragTime).format('LLL')}, ${this.state.dragGroupTitle}`\n    } else if (this.state.resizeTime) {\n      label = moment(this.state.resizeTime).format('LLL')\n    }\n\n    return label ? <InfoLabel label={label} /> : ''\n  }\n\n  header (canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, timeSteps, headerLabelGroupHeight, headerLabelHeight) {\n    return (\n      <Header canvasTimeStart={canvasTimeStart}\n              canvasTimeEnd={canvasTimeEnd}\n              canvasWidth={canvasWidth}\n              lineHeight={this.props.lineHeight}\n              minUnit={minUnit}\n              timeSteps={timeSteps}\n              headerLabelGroupHeight={headerLabelGroupHeight}\n              headerLabelHeight={headerLabelHeight}\n              width={this.state.width}\n              zoom={zoom}\n              visibleTimeStart={this.state.visibleTimeStart}\n              visibleTimeEnd={this.state.visibleTimeEnd}\n              fixedHeader={this.props.fixedHeader}\n              zIndex={this.props.zIndexStart + 1}\n              showPeriod={this.showPeriod} />\n    )\n  }\n\n  sidebar (height, groupHeights, headerHeight) {\n    return (\n      <Sidebar groups={this.props.groups}\n               keys={this.props.keys}\n\n               width={this.props.sidebarWidth}\n               lineHeight={this.props.lineHeight}\n               groupHeights={groupHeights}\n               height={height}\n               headerHeight={headerHeight}\n\n               fixedHeader={this.props.fixedHeader}\n               zIndex={this.props.zIndexStart + 2}>\n        {this.props.children}\n      </Sidebar>\n    )\n  }\n\n  stackItems (items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, width) {\n    const { keys, dragSnap, lineHeight, headerLabelGroupHeight, headerLabelHeight, stackItems, fullUpdate, itemHeightRatio } = this.props\n    const { draggingItem, dragTime, resizingItem, resizingEdge, resizeTime, newGroupOrder } = this.state\n    const zoom = visibleTimeEnd - visibleTimeStart\n    const canvasTimeEnd = canvasTimeStart + zoom * 3\n    const canvasWidth = width * 3\n    const headerHeight = headerLabelGroupHeight + headerLabelHeight\n\n    const visibleItems = getVisibleItems(items, canvasTimeStart, canvasTimeEnd, keys)\n    const groupOrders = getGroupOrders(groups, keys)\n\n    let dimensionItems = visibleItems.map(item => {\n      return {\n        id: _get(item, keys.itemIdKey),\n        dimensions: calculateDimensions({\n          item,\n          order: groupOrders[_get(item, keys.itemGroupKey)],\n          keys,\n          canvasTimeStart,\n          canvasTimeEnd,\n          canvasWidth,\n          dragSnap,\n          lineHeight,\n          draggingItem,\n          dragTime,\n          resizingItem,\n          resizingEdge,\n          resizeTime,\n          newGroupOrder,\n          itemHeightRatio,\n          fullUpdate,\n          visibleTimeStart,\n          visibleTimeEnd\n        })\n      }\n    }).filter(i => i.dimensions)\n\n    const stackingMethod = stackItems ? stack : nostack\n\n    const { height, groupHeights, groupTops } = stackingMethod(\n      dimensionItems,\n      groupOrders,\n      lineHeight,\n      headerHeight\n    )\n\n    return {dimensionItems, height, groupHeights, groupTops}\n  }\n\n  handleDoubleClick = (e) => {\n    const { canvasTimeStart, width, visibleTimeStart, visibleTimeEnd, groupTops, topOffset } = this.state\n    const zoom = visibleTimeEnd - visibleTimeStart\n    const canvasTimeEnd = canvasTimeStart + zoom * 3\n    const canvasWidth = width * 3\n    const { pageX, pageY } = e\n    const ratio = (canvasTimeEnd - canvasTimeStart) / canvasWidth\n    const boundingRect = this.refs.scrollComponent.getBoundingClientRect()\n    let timePosition = visibleTimeStart + ratio * (pageX - boundingRect.left)\n    if (this.props.dragSnap) {\n      timePosition = Math.round(timePosition / this.props.dragSnap) * this.props.dragSnap\n    }\n\n    let groupIndex = 0\n    for (var key of Object.keys(groupTops)) {\n      var item = groupTops[key]\n      if (pageY - topOffset > item) {\n        groupIndex = parseInt(key, 10)\n      } else {\n        break\n      }\n    }\n\n    if (this.props.onCanvasDoubleClick) {\n      this.props.onCanvasDoubleClick(this.props.groups[groupIndex], timePosition, e)\n    }\n  }\n\n  render () {\n    const { items, groups, headerLabelGroupHeight, headerLabelHeight, sidebarWidth, timeSteps } = this.props\n    const { draggingItem, resizingItem, isDragging, width, visibleTimeStart, visibleTimeEnd, canvasTimeStart } = this.state\n    let { dimensionItems, height, groupHeights, groupTops } = this.state\n    const zoom = visibleTimeEnd - visibleTimeStart\n    const canvasTimeEnd = canvasTimeStart + zoom * 3\n    const canvasWidth = width * 3\n    const minUnit = getMinUnit(zoom, width, timeSteps)\n    const headerHeight = headerLabelGroupHeight + headerLabelHeight\n\n    if (draggingItem || resizingItem) {\n      const stackResults = this.stackItems(items, groups, canvasTimeStart, visibleTimeStart, visibleTimeEnd, width)\n      dimensionItems = stackResults.dimensionItems\n      height = stackResults.height\n      groupHeights = stackResults.groupHeights\n      groupTops = stackResults.groupTops\n    }\n\n    const outerComponentStyle = {\n      height: `${height}px`\n    }\n\n    const scrollComponentStyle = {\n      width: `${width}px`,\n      height: `${height + 20}px`,\n      cursor: isDragging ? 'move' : 'default'\n    }\n\n    const canvasComponentStyle = {\n      width: `${canvasWidth}px`,\n      height: `${height}px`\n    }\n\n    return (\n      <div style={this.props.style} ref='container' className='react-calendar-timeline'>\n        <div style={outerComponentStyle} className='rct-outer'>\n          {sidebarWidth > 0 ? this.sidebar(height, groupHeights, headerHeight) : null}\n          <div ref='scrollComponent'\n               className='rct-scroll'\n               style={scrollComponentStyle}\n               onScroll={this.onScroll}\n               onWheel={this.onWheel}\n               onMouseDown={this.handleMouseDown}\n               onMouseMove={this.handleMouseMove}\n               onMouseUp={this.handleMouseUp}\n          >\n            <div ref='canvasComponent'\n                 className='rct-canvas'\n                 style={canvasComponentStyle}\n                 onDoubleClick={ this.handleDoubleClick }\n            >\n              {this.items(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, dimensionItems, groupHeights, groupTops)}\n              {this.verticalLines(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, timeSteps, height, headerHeight)}\n              {this.horizontalLines(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, groupHeights, headerHeight)}\n              {this.todayLine(canvasTimeStart, zoom, canvasTimeEnd, canvasWidth, minUnit, height, headerHeight)}\n              {this.infoLabel()}\n              {this.header(\n                canvasTimeStart,\n                zoom,\n                canvasTimeEnd,\n                canvasWidth,\n                minUnit,\n                timeSteps,\n                headerLabelGroupHeight,\n                headerLabelHeight\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/items/ItemGroup.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Item = require('./Item');\n\nvar _Item2 = _interopRequireDefault(_Item);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ItemGroup = function (_Component) {\n  _inherits(ItemGroup, _Component);\n\n  function ItemGroup() {\n    _classCallCheck(this, ItemGroup);\n\n    return _possibleConstructorReturn(this, (ItemGroup.__proto__ || Object.getPrototypeOf(ItemGroup)).apply(this, arguments));\n  }\n\n  _createClass(ItemGroup, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !((0, _utils.arraysEqual)(nextProps.groups, this.props.groups) && (0, _utils.arraysEqual)(nextProps.items, this.props.items) && (0, _utils.arraysEqual)(Object.keys(nextProps.groupOrders), Object.keys(this.props.groupOrders)) && nextProps.keys === this.props.keys && nextProps.canvasTimeStart === this.props.canvasTimeStart && nextProps.canvasTimeEnd === this.props.canvasTimeEnd && nextProps.canvasWidth === this.props.canvasWidth && nextProps.selectedItem === this.props.selectedItem && nextProps.lineHeight === this.props.lineHeight && nextProps.dragSnap === this.props.dragSnap && nextProps.minResizeWidth === this.props.minResizeWidth && nextProps.canChangeGroup === this.props.canChangeGroup && nextProps.canMove === this.props.canMove && nextProps.canResize === this.props.canResize);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      // const { canvasTimeStart, canvasTimeEnd } = this.props\n      var _props$keys = this.props.keys,\n          itemIdKey = _props$keys.itemIdKey,\n          itemGroupKey = _props$keys.itemGroupKey;\n\n\n      var groupOrders = this.props.groupOrders;\n      var visibleItems = this.props.items;\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'rct-item-group' },\n        visibleItems.map(function (item) {\n          return _react2.default.createElement(_Item2.default, { key: (0, _utils._get)(item, itemIdKey),\n            item: item,\n            keys: _this2.props.keys,\n            order: groupOrders[(0, _utils._get)(item, itemGroupKey)],\n            selected: _this2.props.selectedItem === (0, _utils._get)(item, itemIdKey),\n            canChangeGroup: (0, _utils._get)(item, 'canChangeGroup') !== undefined ? (0, _utils._get)(item, 'canChangeGroup') : _this2.props.canChangeGroup,\n            canMove: (0, _utils._get)(item, 'canMove') !== undefined ? (0, _utils._get)(item, 'canMove') : _this2.props.canMove,\n            canResize: (0, _utils._get)(item, 'canResize') !== undefined ? (0, _utils._get)(item, 'canResize') : _this2.props.canResize,\n            canvasTimeStart: _this2.props.canvasTimeStart,\n            canvasTimeEnd: _this2.props.canvasTimeEnd,\n            canvasWidth: _this2.props.canvasWidth,\n            lineHeight: _this2.props.lineHeight,\n            dragSnap: _this2.props.dragSnap,\n            minResizeWidth: _this2.props.minResizeWidth,\n            onResizing: _this2.props.itemResizing,\n            onResized: _this2.props.itemResized,\n            onDrag: _this2.props.itemDrag,\n            onDrop: _this2.props.itemDrop,\n            onSelect: _this2.props.itemSelect });\n        })\n      );\n    }\n  }]);\n\n  return ItemGroup;\n}(_react.Component);\n\n// they were all checked in Items\n\n\nexports.default = ItemGroup;\nItemGroup.propTypes = {\n  // groups: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]).isRequired,\n  // items: React.PropTypes.oneOfType([React.PropTypes.array, React.PropTypes.object]).isRequired,\n  // groupOrders: React.PropTypes.object.isRequired,\n  //\n  // canvasTimeStart: React.PropTypes.number.isRequired,\n  // canvasTimeEnd: React.PropTypes.number.isRequired,\n  // canvasWidth: React.PropTypes.number.isRequired,\n  // lineHeight: React.PropTypes.number.isRequired,\n  //\n  // dragSnap: React.PropTypes.number,\n  // minResizeWidth: React.PropTypes.number,\n  // selectedItem: React.PropTypes.string,\n  //\n  // canChangeGroup: React.PropTypes.bool.isRequired,\n  // canMove: React.PropTypes.bool.isRequired,\n  // canResize: React.PropTypes.bool.isRequired,\n  //\n  // keys: React.PropTypes.object.isRequired,\n  //\n  // itemSelect: React.PropTypes.func,\n  // itemDrag: React.PropTypes.func,\n  // itemDrop: React.PropTypes.func,\n  // itemResizing: React.PropTypes.func,\n  // itemResized: React.PropTypes.func\n};\nItemGroup.defaultProps = {};","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/items/Item.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _interact = require('interact.js');\n\nvar _interact2 = _interopRequireDefault(_interact);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Item = function (_Component) {\n  _inherits(Item, _Component);\n\n  // removed prop type check for SPEED!\n  // they are coming from a trusted component anyway\n  // (this complicates performance debugging otherwise)\n  function Item(props) {\n    _classCallCheck(this, Item);\n\n    var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));\n\n    _this.onMouseDown = function (e) {\n      if (!_this.state.interactMounted) {\n        e.preventDefault();\n        _this.startedClicking = true;\n      }\n    };\n\n    _this.onMouseUp = function (e) {\n      if (!_this.state.interactMounted && _this.startedClicking) {\n        _this.startedClicking = false;\n        _this.actualClick(e, 'click');\n      }\n    };\n\n    _this.onTouchStart = function (e) {\n      if (!_this.state.interactMounted) {\n        e.preventDefault();\n        _this.startedTouching = true;\n      }\n    };\n\n    _this.onTouchEnd = function (e) {\n      if (!_this.state.interactMounted && _this.startedTouching) {\n        _this.startedTouching = false;\n        _this.actualClick(e, 'touch');\n      }\n    };\n\n    _this.handleDoubleClick = function (e) {\n      e.preventDefault();\n      e.stopPropagation();\n      if (_this.props.onItemDoubleClick) {\n        _this.props.onItemDoubleClick(_this.itemId, e);\n      }\n    };\n\n    _this.handleContextMenu = function (e) {\n      if (_this.props.onContextMenu) {\n        e.preventDefault();\n        e.stopPropagation();\n        _this.props.onContextMenu(_this.itemId, e);\n      }\n    };\n\n    _this.cacheDataFromProps(props);\n\n    _this.state = {\n      interactMounted: false,\n\n      dragging: null,\n      dragStart: null,\n      preDragPosition: null,\n      dragTime: null,\n      dragGroupDelta: null,\n\n      resizing: null,\n      resizeEdge: null,\n      resizeStart: null,\n      resizeTime: null\n    };\n    return _this;\n  }\n\n  _createClass(Item, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var shouldUpdate = nextState.dragging !== this.state.dragging || nextState.dragTime !== this.state.dragTime || nextState.dragGroupDelta !== this.state.dragGroupDelta || nextState.resizing !== this.state.resizing || nextState.resizeTime !== this.state.resizeTime || nextProps.keys !== this.props.keys || !(0, _utils.deepObjectCompare)(nextProps.itemProps, this.props.itemProps) || nextProps.selected !== this.props.selected || nextProps.item !== this.props.item || nextProps.canvasTimeStart !== this.props.canvasTimeStart || nextProps.canvasTimeEnd !== this.props.canvasTimeEnd || nextProps.canvasWidth !== this.props.canvasWidth || nextProps.lineHeight !== this.props.lineHeight || nextProps.order !== this.props.order || nextProps.dragSnap !== this.props.dragSnap || nextProps.minResizeWidth !== this.props.minResizeWidth || nextProps.selected !== this.props.selected || nextProps.canChangeGroup !== this.props.canChangeGroup || nextProps.canSelect !== this.props.canSelect || nextProps.topOffset !== this.props.topOffset || nextProps.canMove !== this.props.canMove || nextProps.canResizeLeft !== this.props.canResizeLeft || nextProps.canResizeRight !== this.props.canResizeRight || nextProps.dimensions !== this.props.dimensions;\n      return shouldUpdate;\n    }\n  }, {\n    key: 'cacheDataFromProps',\n    value: function cacheDataFromProps(props) {\n      this.itemId = (0, _utils._get)(props.item, props.keys.itemIdKey);\n      this.itemTitle = (0, _utils._get)(props.item, props.keys.itemTitleKey);\n      this.itemDivTitle = props.keys.itemDivTitleKey ? (0, _utils._get)(props.item, props.keys.itemDivTitleKey) : this.itemTitle;\n      this.itemTimeStart = (0, _utils._get)(props.item, props.keys.itemTimeStartKey);\n      this.itemTimeEnd = (0, _utils._get)(props.item, props.keys.itemTimeEndKey);\n    }\n  }, {\n    key: 'coordinateToTimeRatio',\n    value: function coordinateToTimeRatio() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      return (props.canvasTimeEnd - props.canvasTimeStart) / props.canvasWidth;\n    }\n  }, {\n    key: 'dragTimeSnap',\n    value: function dragTimeSnap(dragTime, considerOffset) {\n      var dragSnap = this.props.dragSnap;\n\n      if (dragSnap) {\n        var offset = considerOffset ? (0, _moment2.default)().utcOffset() * 60 * 1000 : 0;\n        return Math.round(dragTime / dragSnap) * dragSnap - offset % dragSnap;\n      } else {\n        return dragTime;\n      }\n    }\n  }, {\n    key: 'resizeTimeSnap',\n    value: function resizeTimeSnap(dragTime) {\n      var dragSnap = this.props.dragSnap;\n\n      if (dragSnap) {\n        var endTime = this.itemTimeEnd % dragSnap;\n        return Math.round((dragTime - endTime) / dragSnap) * dragSnap + endTime;\n      } else {\n        return dragTime;\n      }\n    }\n  }, {\n    key: 'dragTime',\n    value: function dragTime(e) {\n      var startTime = this.itemTimeStart;\n\n      if (this.state.dragging) {\n        var deltaX = e.pageX - this.state.dragStart.x;\n        var timeDelta = deltaX * this.coordinateToTimeRatio();\n\n        return this.dragTimeSnap(startTime + timeDelta, true);\n      } else {\n        return startTime;\n      }\n    }\n  }, {\n    key: 'dragGroupDelta',\n    value: function dragGroupDelta(e) {\n      var _props = this.props,\n          groupTops = _props.groupTops,\n          order = _props.order,\n          topOffset = _props.topOffset;\n\n      if (this.state.dragging) {\n        if (!this.props.canChangeGroup) {\n          return 0;\n        }\n        var groupDelta = 0;\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = Object.keys(groupTops)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var key = _step.value;\n\n            var item = groupTops[key];\n            if (e.pageY - topOffset > item) {\n              groupDelta = parseInt(key, 10) - order;\n            } else {\n              break;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (this.props.order + groupDelta < 0) {\n          return 0 - this.props.order;\n        } else {\n          return groupDelta;\n        }\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: 'resizeTimeDelta',\n    value: function resizeTimeDelta(e, resizeEdge) {\n      var length = this.itemTimeEnd - this.itemTimeStart;\n      var timeDelta = this.dragTimeSnap((e.pageX - this.state.resizeStart) * this.coordinateToTimeRatio());\n\n      if (length + (resizeEdge === 'left' ? -timeDelta : timeDelta) < (this.props.dragSnap || 1000)) {\n        if (resizeEdge === 'left') {\n          return length - (this.props.dragSnap || 1000);\n        } else {\n          return (this.props.dragSnap || 1000) - length;\n        }\n      } else {\n        return timeDelta;\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {}\n  }, {\n    key: 'mountInteract',\n    value: function mountInteract() {\n      var _this2 = this;\n\n      var leftResize = this.props.useResizeHandle ? this.refs.dragLeft : true;\n      var rightResize = this.props.useResizeHandle ? this.refs.dragRight : true;\n\n      (0, _interact2.default)(this.refs.item).resizable({\n        edges: {\n          left: this.canResizeLeft() && leftResize,\n          right: this.canResizeRight() && rightResize,\n          top: false,\n          bottom: false\n        },\n        enabled: this.props.selected && (this.canResizeLeft() || this.canResizeRight())\n      }).draggable({\n        enabled: this.props.selected\n      }).on('dragstart', function (e) {\n        if (_this2.props.selected) {\n          _this2.setState({\n            dragging: true,\n            dragStart: { x: e.pageX, y: e.pageY },\n            preDragPosition: { x: e.target.offsetLeft, y: e.target.offsetTop },\n            dragTime: _this2.itemTimeStart,\n            dragGroupDelta: 0\n          });\n        } else {\n          return false;\n        }\n      }).on('dragmove', function (e) {\n        if (_this2.state.dragging) {\n          var dragTime = _this2.dragTime(e);\n          var dragGroupDelta = _this2.dragGroupDelta(e);\n\n          if (_this2.props.moveResizeValidator) {\n            dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);\n          }\n\n          if (_this2.props.onDrag) {\n            _this2.props.onDrag(_this2.itemId, dragTime, _this2.props.order + dragGroupDelta);\n          }\n\n          _this2.setState({\n            dragTime: dragTime,\n            dragGroupDelta: dragGroupDelta\n          });\n        }\n      }).on('dragend', function (e) {\n        if (_this2.state.dragging) {\n          if (_this2.props.onDrop) {\n            var dragTime = _this2.dragTime(e);\n\n            if (_this2.props.moveResizeValidator) {\n              dragTime = _this2.props.moveResizeValidator('move', _this2.props.item, dragTime);\n            }\n\n            _this2.props.onDrop(_this2.itemId, dragTime, _this2.props.order + _this2.dragGroupDelta(e));\n          }\n\n          _this2.setState({\n            dragging: false,\n            dragStart: null,\n            preDragPosition: null,\n            dragTime: null,\n            dragGroupDelta: null\n          });\n        }\n      }).on('resizestart', function (e) {\n        if (_this2.props.selected) {\n          _this2.setState({\n            resizing: true,\n            resizeEdge: null, // we don't know yet\n            resizeStart: e.pageX,\n            resizeTime: 0\n          });\n        } else {\n          return false;\n        }\n      }).on('resizemove', function (e) {\n        if (_this2.state.resizing) {\n          var resizeEdge = _this2.state.resizeEdge;\n\n          if (!resizeEdge) {\n            resizeEdge = e.deltaRect.left !== 0 ? 'left' : 'right';\n            _this2.setState({ resizeEdge: resizeEdge });\n          }\n          var time = resizeEdge === 'left' ? _this2.itemTimeStart : _this2.itemTimeEnd;\n\n          var resizeTime = _this2.resizeTimeSnap(time + _this2.resizeTimeDelta(e, resizeEdge));\n\n          if (_this2.props.moveResizeValidator) {\n            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);\n          }\n\n          if (_this2.props.onResizing) {\n            _this2.props.onResizing(_this2.itemId, resizeTime, resizeEdge);\n          }\n\n          _this2.setState({\n            resizeTime: resizeTime\n          });\n        }\n      }).on('resizeend', function (e) {\n        if (_this2.state.resizing) {\n          var resizeEdge = _this2.state.resizeEdge;\n\n          var time = resizeEdge === 'left' ? _this2.itemTimeStart : _this2.itemTimeEnd;\n          var resizeTime = _this2.resizeTimeSnap(time + _this2.resizeTimeDelta(e, resizeEdge));\n\n          if (_this2.props.moveResizeValidator) {\n            resizeTime = _this2.props.moveResizeValidator('resize', _this2.props.item, resizeTime, resizeEdge);\n          }\n\n          if (_this2.props.onResized && _this2.resizeTimeDelta(e, resizeEdge) !== 0) {\n            _this2.props.onResized(_this2.itemId, resizeTime, resizeEdge);\n          }\n          _this2.setState({\n            resizing: null,\n            resizeStart: null,\n            resizeEdge: null,\n            resizeTime: null\n          });\n        }\n      }).on('tap', function (e) {\n        _this2.actualClick(e, e.pointerType === 'mouse' ? 'click' : 'touch');\n      });\n\n      this.setState({\n        interactMounted: true\n      });\n    }\n  }, {\n    key: 'canResizeLeft',\n    value: function canResizeLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (!props.canResizeLeft || props.dimensions.clippedLeft) {\n        return false;\n      }\n      var width = parseInt(props.dimensions.width, 10);\n      return width >= props.minResizeWidth;\n    }\n  }, {\n    key: 'canResizeRight',\n    value: function canResizeRight() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      if (!props.canResizeRight || props.dimensions.clippedRight) {\n        return false;\n      }\n      var width = parseInt(props.dimensions.width, 10);\n      return width >= props.minResizeWidth;\n    }\n  }, {\n    key: 'canMove',\n    value: function canMove() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n\n      return !!props.canMove;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      this.cacheDataFromProps(nextProps);\n\n      var interactMounted = this.state.interactMounted;\n\n      var couldDrag = this.props.selected && this.canMove(this.props);\n      var couldResizeLeft = this.props.selected && this.canResizeLeft(this.props);\n      var couldResizeRight = this.props.selected && this.canResizeRight(this.props);\n      var willBeAbleToDrag = nextProps.selected && this.canMove(nextProps);\n      var willBeAbleToResizeLeft = nextProps.selected && this.canResizeLeft(nextProps);\n      var willBeAbleToResizeRight = nextProps.selected && this.canResizeRight(nextProps);\n\n      if (nextProps.selected && !interactMounted) {\n        this.mountInteract();\n        interactMounted = true;\n      }\n\n      if (interactMounted && (couldResizeLeft !== willBeAbleToResizeLeft || couldResizeRight !== willBeAbleToResizeRight)) {\n        var leftResize = this.props.useResizeHandle ? this.refs.dragLeft : true;\n        var rightResize = this.props.useResizeHandle ? this.refs.dragRight : true;\n\n        (0, _interact2.default)(this.refs.item).resizable({\n          enabled: willBeAbleToResizeLeft || willBeAbleToResizeRight,\n          edges: {\n            top: false,\n            bottom: false,\n            left: willBeAbleToResizeLeft && leftResize,\n            right: willBeAbleToResizeRight && rightResize\n          }\n        });\n      }\n      if (interactMounted && couldDrag !== willBeAbleToDrag) {\n        (0, _interact2.default)(this.refs.item).draggable({ enabled: willBeAbleToDrag });\n      }\n    }\n  }, {\n    key: 'actualClick',\n    value: function actualClick(e, clickType) {\n      if (this.props.canSelect && this.props.onSelect) {\n        this.props.onSelect(this.itemId, clickType, e);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var dimensions = this.props.dimensions;\n      if (typeof this.props.order === 'undefined' || this.props.order === null) {\n        return null;\n      }\n\n      var classNames = 'rct-item' + (this.props.selected ? ' selected' : '') + (this.canMove(this.props) ? ' can-move' : '') + (this.canResizeLeft(this.props) || this.canResizeRight(this.props) ? ' can-resize' : '') + (this.canResizeLeft(this.props) ? ' can-resize-left' : '') + (this.canResizeRight(this.props) ? ' can-resize-right' : '') + (this.props.item.className ? ' ' + this.props.item.className : '') + (dimensions.clippedLeft ? ' clipped-left' : '') + (dimensions.clippedRight ? ' clipped-right' : '');\n\n      var style = {\n        left: dimensions.left + 'px',\n        top: dimensions.top + 'px',\n        width: dimensions.width + 'px',\n        height: dimensions.height + 'px',\n        lineHeight: dimensions.height + 'px'\n      };\n\n      return _react2.default.createElement(\n        'div',\n        _extends({}, this.props.item.itemProps, {\n          key: this.itemId,\n          ref: 'item',\n          className: classNames,\n          title: this.itemDivTitle,\n          onMouseDown: this.onMouseDown,\n          onMouseUp: this.onMouseUp,\n          onTouchStart: this.onTouchStart,\n          onTouchEnd: this.onTouchEnd,\n          onDoubleClick: this.handleDoubleClick,\n          onContextMenu: this.handleContextMenu,\n          style: style }),\n        this.props.useResizeHandle ? _react2.default.createElement('div', { ref: 'dragLeft', className: 'rct-drag-left' }) : '',\n        _react2.default.createElement(\n          'div',\n          { className: 'rct-item-overflow' },\n          _react2.default.createElement(\n            'div',\n            { className: 'rct-item-content' },\n            this.itemTitle\n          )\n        ),\n        this.props.useResizeHandle ? _react2.default.createElement('div', { ref: 'dragRight', className: 'rct-drag-right' }) : ''\n      );\n    }\n  }]);\n\n  return Item;\n}(_react.Component);\n\nItem.propTypes = {\n  // canvasTimeStart: React.PropTypes.number.isRequired,\n  // canvasTimeEnd: React.PropTypes.number.isRequired,\n  // canvasWidth: React.PropTypes.number.isRequired,\n  // lineHeight: React.PropTypes.number.isRequired,\n  // order: React.PropTypes.number.isRequired,\n  //\n  // dragSnap: React.PropTypes.number,\n  // minResizeWidth: React.PropTypes.number,\n  // selected: React.PropTypes.bool,\n  //\n  // canChangeGroup: React.PropTypes.bool.isRequired,\n  // canMove: React.PropTypes.bool.isRequired,\n  // canResizeLeft: React.PropTypes.bool.isRequired,\n  // canResizeRight: React.PropTypes.bool.isRequired,\n  //\n  // keys: React.PropTypes.object.isRequired,\n  // item: React.PropTypes.object.isRequired,\n  //\n  // onSelect: React.PropTypes.func,\n  // onDrag: React.PropTypes.func,\n  // onDrop: React.PropTypes.func,\n  // onResizing: React.PropTypes.func,\n  // onResized: React.PropTypes.func,\n  // onContextMenu: React.PropTypes.func\n};\nItem.defaultProps = {\n  selected: false\n};\nexports.default = Item;","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/items/Items.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Item = require('./Item');\n\nvar _Item2 = _interopRequireDefault(_Item);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n// import ItemGroup from './ItemGroup'\n\nvar canResizeLeft = function canResizeLeft(item, canResize) {\n  var value = (0, _utils._get)(item, 'canResize') !== undefined ? (0, _utils._get)(item, 'canResize') : canResize;\n  return value === 'left' || value === 'both';\n};\n\nvar canResizeRight = function canResizeRight(item, canResize) {\n  var value = (0, _utils._get)(item, 'canResize') !== undefined ? (0, _utils._get)(item, 'canResize') : canResize;\n  return value === 'right' || value === 'both' || value === true;\n};\n\nvar Items = function (_Component) {\n  _inherits(Items, _Component);\n\n  function Items() {\n    _classCallCheck(this, Items);\n\n    return _possibleConstructorReturn(this, (Items.__proto__ || Object.getPrototypeOf(Items)).apply(this, arguments));\n  }\n\n  _createClass(Items, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !((0, _utils.arraysEqual)(nextProps.groups, this.props.groups) && (0, _utils.arraysEqual)(nextProps.items, this.props.items) && nextProps.keys === this.props.keys && nextProps.canvasTimeStart === this.props.canvasTimeStart && nextProps.canvasTimeEnd === this.props.canvasTimeEnd && nextProps.canvasWidth === this.props.canvasWidth && nextProps.selectedItem === this.props.selectedItem && nextProps.lineHeight === this.props.lineHeight && nextProps.dragSnap === this.props.dragSnap && nextProps.minResizeWidth === this.props.minResizeWidth && nextProps.canChangeGroup === this.props.canChangeGroup && nextProps.canMove === this.props.canMove && nextProps.canResize === this.props.canResize && nextProps.canSelect === this.props.canSelect && nextProps.dimensionItems === this.props.dimensionItems && nextProps.topOffset === this.props.topOffset);\n    }\n  }, {\n    key: 'getGroupOrders',\n    value: function getGroupOrders() {\n      var groupIdKey = this.props.keys.groupIdKey;\n\n\n      var groupOrders = {};\n\n      for (var i = 0; i < this.props.groups.length; i++) {\n        groupOrders[(0, _utils._get)(this.props.groups[i], groupIdKey)] = i;\n      }\n\n      return groupOrders;\n    }\n  }, {\n    key: 'getVisibleItems',\n    value: function getVisibleItems(canvasTimeStart, canvasTimeEnd, groupOrders) {\n      var _props$keys = this.props.keys,\n          itemTimeStartKey = _props$keys.itemTimeStartKey,\n          itemTimeEndKey = _props$keys.itemTimeEndKey;\n\n\n      return this.props.items.filter(function (item) {\n        return (0, _utils._get)(item, itemTimeStartKey) <= canvasTimeEnd && (0, _utils._get)(item, itemTimeEndKey) >= canvasTimeStart;\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          canvasTimeStart = _props.canvasTimeStart,\n          canvasTimeEnd = _props.canvasTimeEnd,\n          dimensionItems = _props.dimensionItems;\n      var _props$keys2 = this.props.keys,\n          itemIdKey = _props$keys2.itemIdKey,\n          itemGroupKey = _props$keys2.itemGroupKey;\n\n\n      var groupOrders = this.getGroupOrders();\n      var visibleItems = this.getVisibleItems(canvasTimeStart, canvasTimeEnd, groupOrders);\n      var sortedDimensionItems = (0, _utils.keyBy)(dimensionItems, 'id');\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'rct-items' },\n        visibleItems.filter(function (item) {\n          return sortedDimensionItems[(0, _utils._get)(item, itemIdKey)];\n        }).map(function (item) {\n          return _react2.default.createElement(_Item2.default, { key: (0, _utils._get)(item, itemIdKey),\n            item: item,\n            keys: _this2.props.keys,\n            order: groupOrders[(0, _utils._get)(item, itemGroupKey)],\n            dimensions: sortedDimensionItems[(0, _utils._get)(item, itemIdKey)].dimensions,\n            selected: _this2.props.selectedItem === (0, _utils._get)(item, itemIdKey),\n            canChangeGroup: (0, _utils._get)(item, 'canChangeGroup') !== undefined ? (0, _utils._get)(item, 'canChangeGroup') : _this2.props.canChangeGroup,\n            canMove: (0, _utils._get)(item, 'canMove') !== undefined ? (0, _utils._get)(item, 'canMove') : _this2.props.canMove,\n            canResizeLeft: canResizeLeft(item, _this2.props.canResize),\n            canResizeRight: canResizeRight(item, _this2.props.canResize),\n            canSelect: (0, _utils._get)(item, 'canSelect') !== undefined ? (0, _utils._get)(item, 'canSelect') : _this2.props.canSelect,\n            useResizeHandle: _this2.props.useResizeHandle,\n            topOffset: _this2.props.topOffset,\n            groupHeights: _this2.props.groupHeights,\n            groupTops: _this2.props.groupTops,\n            canvasTimeStart: _this2.props.canvasTimeStart,\n            canvasTimeEnd: _this2.props.canvasTimeEnd,\n            canvasWidth: _this2.props.canvasWidth,\n            lineHeight: _this2.props.lineHeight,\n            dragSnap: _this2.props.dragSnap,\n            minResizeWidth: _this2.props.minResizeWidth,\n            onResizing: _this2.props.itemResizing,\n            onResized: _this2.props.itemResized,\n            moveResizeValidator: _this2.props.moveResizeValidator,\n            onDrag: _this2.props.itemDrag,\n            onDrop: _this2.props.itemDrop,\n            onItemDoubleClick: _this2.props.onItemDoubleClick,\n            onContextMenu: _this2.props.onItemContextMenu,\n            onSelect: _this2.props.itemSelect });\n        })\n      );\n    }\n  }]);\n\n  return Items;\n}(_react.Component);\n\nItems.propTypes = {\n  groups: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object]).isRequired,\n  items: _react.PropTypes.oneOfType([_react.PropTypes.array, _react.PropTypes.object]).isRequired,\n\n  canvasTimeStart: _react.PropTypes.number.isRequired,\n  canvasTimeEnd: _react.PropTypes.number.isRequired,\n  canvasWidth: _react.PropTypes.number.isRequired,\n  lineHeight: _react.PropTypes.number.isRequired,\n\n  dragSnap: _react.PropTypes.number,\n  minResizeWidth: _react.PropTypes.number,\n  selectedItem: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),\n\n  canChangeGroup: _react.PropTypes.bool.isRequired,\n  canMove: _react.PropTypes.bool.isRequired,\n  canResize: _react.PropTypes.oneOf([true, false, 'left', 'right', 'both']),\n  canSelect: _react.PropTypes.bool,\n\n  keys: _react.PropTypes.object.isRequired,\n\n  moveResizeValidator: _react.PropTypes.func,\n  itemSelect: _react.PropTypes.func,\n  itemDrag: _react.PropTypes.func,\n  itemDrop: _react.PropTypes.func,\n  itemResizing: _react.PropTypes.func,\n  itemResized: _react.PropTypes.func,\n\n  onItemDoubleClick: _react.PropTypes.func,\n  onItemContextMenu: _react.PropTypes.func\n};\nItems.defaultProps = {};\nexports.default = Items;","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/layout/Header.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _utils = require('../utils.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Header = function (_Component) {\n  _inherits(Header, _Component);\n\n  function Header(props) {\n    _classCallCheck(this, Header);\n\n    var _this = _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).call(this, props));\n\n    _this.periodClick = function (e) {\n      var _e$target$dataset = e.target.dataset,\n          time = _e$target$dataset.time,\n          unit = _e$target$dataset.unit;\n\n      if (time && unit) {\n        _this.props.showPeriod((0, _moment2.default)(time - 0), unit);\n      }\n    };\n\n    _this.touchStart = function (e) {\n      if (e.touches.length === 1) {\n        _this.setState({\n          touchTarget: e.target || e.touchTarget,\n          touchActive: true\n        });\n      }\n    };\n\n    _this.touchEnd = function (e) {\n      if (!_this.state.touchActive) {\n        return _this.resetTouchState();\n      }\n\n      var changedTouches = e.changedTouches[0];\n      if (changedTouches) {\n        var elem = document.elementFromPoint(changedTouches.pageX, changedTouches.pageY);\n        if (elem !== _this.state.touchTarget) {\n          return _this.resetTouchState();\n        }\n      }\n\n      _this.resetTouchState();\n      _this.periodClick(e);\n    };\n\n    _this.state = {\n      scrollTop: 0,\n      componentTop: 0,\n      touchTarget: null,\n      touchActive: false\n    };\n    return _this;\n  }\n\n  _createClass(Header, [{\n    key: 'scroll',\n    value: function scroll(e) {\n      if (this.props.fixedHeader === 'absolute' && window && window.document) {\n        var scroll = window.document.body.scrollTop;\n        this.setState({\n          scrollTop: scroll\n        });\n      }\n    }\n  }, {\n    key: 'setComponentTop',\n    value: function setComponentTop() {\n      var viewportOffset = this.refs.header.getBoundingClientRect();\n      this.setState({\n        componentTop: viewportOffset.top\n      });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setComponentTop();\n      this.scroll();\n\n      this.scrollEventListener = {\n        handleEvent: function handleEvent(event) {\n          _this2.scroll();\n        }\n      };\n\n      window.addEventListener('scroll', this.scrollEventListener);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('scroll', this.scrollEventListener);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps() {\n      this.setComponentTop();\n    }\n  }, {\n    key: 'headerLabel',\n    value: function headerLabel(time, unit, width) {\n      if (unit === 'year') {\n        return time.format(width < 46 ? 'YY' : 'YYYY');\n      } else if (unit === 'month') {\n        return time.format(width < 65 ? 'MM/YY' : width < 75 ? 'MM/YYYY' : width < 120 ? 'MMM YYYY' : 'MMMM YYYY');\n      } else if (unit === 'day') {\n        return time.format(width < 150 ? 'L' : 'dddd, LL');\n      } else if (unit === 'hour') {\n        return time.format(width < 50 ? 'HH' : width < 130 ? 'HH:00' : width < 150 ? 'L, HH:00' : 'dddd, LL, HH:00');\n      } else {\n        return time.format('LLL');\n      }\n    }\n  }, {\n    key: 'subHeaderLabel',\n    value: function subHeaderLabel(time, unit, width) {\n      if (unit === 'year') {\n        return time.format(width < 46 ? 'YY' : 'YYYY');\n      } else if (unit === 'month') {\n        return time.format(width < 37 ? 'MM' : width < 85 ? 'MMM' : 'MMMM');\n      } else if (unit === 'day') {\n        return time.format(width < 47 ? 'D' : width < 80 ? 'dd D' : width < 120 ? 'ddd, Do' : 'dddd, Do');\n      } else if (unit === 'hour') {\n        return time.format(width < 50 ? 'HH' : 'HH:00');\n      } else if (unit === 'minute') {\n        return time.format(width < 60 ? 'mm' : 'HH:mm');\n      } else {\n        return time.get(unit);\n      }\n    }\n  }, {\n    key: 'resetTouchState',\n    value: function resetTouchState() {\n      this.setState({\n        touchTarget: null,\n        touchActive: false\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var timeLabels = [];\n      var _props = this.props,\n          canvasTimeStart = _props.canvasTimeStart,\n          canvasTimeEnd = _props.canvasTimeEnd,\n          canvasWidth = _props.canvasWidth,\n          lineHeight = _props.lineHeight,\n          visibleTimeStart = _props.visibleTimeStart,\n          visibleTimeEnd = _props.visibleTimeEnd,\n          minUnit = _props.minUnit,\n          timeSteps = _props.timeSteps,\n          fixedHeader = _props.fixedHeader,\n          headerLabelGroupHeight = _props.headerLabelGroupHeight,\n          headerLabelHeight = _props.headerLabelHeight;\n      var scrollTop = this.state.scrollTop;\n\n      var ratio = canvasWidth / (canvasTimeEnd - canvasTimeStart);\n      var twoHeaders = minUnit !== 'year';\n\n      // add the top header\n      if (twoHeaders) {\n        (function () {\n          var nextUnit = (0, _utils.getNextUnit)(minUnit);\n\n          (0, _utils.iterateTimes)(visibleTimeStart, visibleTimeEnd, nextUnit, timeSteps, function (time, nextTime) {\n            var startTime = Math.max(visibleTimeStart, time.valueOf());\n            var endTime = Math.min(visibleTimeEnd, nextTime.valueOf());\n            var left = Math.round((startTime.valueOf() - canvasTimeStart) * ratio, -2);\n            var right = Math.round((endTime.valueOf() - canvasTimeStart) * ratio, -2);\n            var labelWidth = right - left;\n            var leftCorrect = fixedHeader === 'fixed' ? Math.round((canvasTimeStart - visibleTimeStart) * ratio) - 1 : 0;\n\n            timeLabels.push(_react2.default.createElement(\n              'div',\n              { key: 'top-label-' + time.valueOf(),\n                href: '#',\n                className: 'rct-label-group',\n                'data-time': time,\n                'data-unit': nextUnit,\n                style: {\n                  left: left + leftCorrect + 'px',\n                  width: labelWidth + 'px',\n                  height: headerLabelGroupHeight + 'px',\n                  lineHeight: headerLabelGroupHeight + 'px',\n                  cursor: 'pointer'\n                } },\n              _this3.headerLabel(time, nextUnit, labelWidth)\n            ));\n          });\n        })();\n      }\n\n      (0, _utils.iterateTimes)(canvasTimeStart, canvasTimeEnd, minUnit, timeSteps, function (time, nextTime) {\n        var left = Math.round((time.valueOf() - canvasTimeStart) * ratio, -2);\n        var minUnitValue = time.get(minUnit === 'day' ? 'date' : minUnit);\n        var firstOfType = minUnitValue === (minUnit === 'day' ? 1 : 0);\n        var labelWidth = Math.round((nextTime.valueOf() - time.valueOf()) * ratio, -2);\n        var borderWidth = firstOfType ? 2 : 1;\n        var leftCorrect = fixedHeader === 'fixed' ? Math.round((canvasTimeStart - visibleTimeStart) * ratio) - borderWidth + 1 : 0;\n\n        timeLabels.push(_react2.default.createElement(\n          'div',\n          { key: 'label-' + time.valueOf(),\n            href: '#',\n            className: 'rct-label ' + (twoHeaders ? '' : 'rct-label-only') + ' ' + (firstOfType ? 'rct-first-of-type' : '') + ' ',\n            'data-time': time,\n            'data-unit': minUnit,\n            style: {\n              top: (minUnit === 'year' ? 0 : headerLabelGroupHeight) + 'px',\n              left: left + leftCorrect + 'px',\n              width: labelWidth + 'px',\n              height: (minUnit === 'year' ? headerLabelGroupHeight + headerLabelHeight : headerLabelHeight) + 'px',\n              lineHeight: (minUnit === 'year' ? headerLabelGroupHeight + headerLabelHeight : headerLabelHeight) + 'px',\n              fontSize: (labelWidth > 30 ? '14' : labelWidth > 20 ? '12' : '10') + 'px',\n              cursor: 'pointer'\n            } },\n          _this3.subHeaderLabel(time, minUnit, labelWidth)\n        ));\n      });\n\n      var zIndex = this.props.zIndex;\n\n\n      var headerStyle = {\n        height: headerLabelGroupHeight + headerLabelHeight + 'px',\n        lineHeight: lineHeight + 'px'\n      };\n\n      if (fixedHeader === 'fixed') {\n        headerStyle.position = 'fixed';\n        headerStyle.width = '100%';\n        headerStyle.zIndex = zIndex;\n      } else if (fixedHeader === 'absolute') {\n        var componentTop = this.state.componentTop;\n        if (scrollTop >= componentTop) {\n          headerStyle.position = 'absolute';\n          headerStyle.top = scrollTop - componentTop + 'px';\n          headerStyle.width = canvasWidth + 'px';\n          headerStyle.left = '0';\n        }\n      }\n\n      return _react2.default.createElement(\n        'div',\n        { ref: 'header', key: 'header', className: 'rct-header', onTouchStart: this.touchStart, onTouchEnd: this.touchEnd, onClick: this.periodClick, style: headerStyle },\n        timeLabels\n      );\n    }\n  }]);\n\n  return Header;\n}(_react.Component);\n\nexports.default = Header;\n\n\nHeader.propTypes = {\n  // groups: React.PropTypes.array.isRequired,\n  // width: React.PropTypes.number.isRequired,\n  // lineHeight: React.PropTypes.number.isRequired,\n  // headerBackgroundColor: React.PropTypes.string.isRequired,\n  showPeriod: _react2.default.PropTypes.func.isRequired,\n  canvasTimeStart: _react2.default.PropTypes.number.isRequired,\n  canvasTimeEnd: _react2.default.PropTypes.number.isRequired,\n  canvasWidth: _react2.default.PropTypes.number.isRequired,\n  lineHeight: _react2.default.PropTypes.number.isRequired,\n  visibleTimeStart: _react2.default.PropTypes.number.isRequired,\n  visibleTimeEnd: _react2.default.PropTypes.number.isRequired,\n  // visibleTimeEnd: React.PropTypes.number.isRequired,\n  minUnit: _react2.default.PropTypes.string.isRequired,\n  timeSteps: _react2.default.PropTypes.object.isRequired,\n  width: _react2.default.PropTypes.number.isRequired,\n  fixedHeader: _react2.default.PropTypes.oneOf(['fixed', 'absolute', 'none']),\n  zIndex: _react2.default.PropTypes.number\n};\nHeader.defaultProps = {\n  fixedHeader: 'none',\n  zIndex: 11\n};","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/layout/InfoLabel.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _function = require('react-pure-render/function');\n\nvar _function2 = _interopRequireDefault(_function);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar InfoLabel = function (_Component) {\n  _inherits(InfoLabel, _Component);\n\n  function InfoLabel() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, InfoLabel);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = InfoLabel.__proto__ || Object.getPrototypeOf(InfoLabel)).call.apply(_ref, [this].concat(args))), _this), _this.shouldComponentUpdate = _function2.default, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(InfoLabel, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'div',\n        { className: 'rct-infolabel' },\n        this.props.label\n      );\n    }\n  }]);\n\n  return InfoLabel;\n}(_react.Component);\n\nexports.default = InfoLabel;\n\n\nInfoLabel.propTypes = {\n  label: _react2.default.PropTypes.string.isRequired\n};\nInfoLabel.defaultProps = {\n  label: ''\n};","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/layout/Sidebar.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Sidebar = function (_Component) {\n  _inherits(Sidebar, _Component);\n\n  function Sidebar(props) {\n    _classCallCheck(this, Sidebar);\n\n    var _this = _possibleConstructorReturn(this, (Sidebar.__proto__ || Object.getPrototypeOf(Sidebar)).call(this, props));\n\n    _this.state = {\n      scrollTop: 0,\n      componentTop: 0\n    };\n    return _this;\n  }\n\n  _createClass(Sidebar, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (nextProps.fixedHeader === 'absolute' && window && window.document && this.state.scrollTop !== nextState.scrollTop) {\n        return true;\n      }\n\n      return !((0, _utils.arraysEqual)(nextProps.groups, this.props.groups) && nextProps.keys === this.props.keys && nextProps.width === this.props.width && nextProps.lineHeight === this.props.lineHeight && nextProps.fixedHeader === this.props.fixedHeader && nextProps.zIndex === this.props.zIndex && nextProps.groupHeights === this.props.groupHeights && nextProps.height === this.props.height);\n    }\n  }, {\n    key: 'scroll',\n    value: function scroll(e) {\n      if (this.props.fixedHeader === 'absolute' && window && window.document) {\n        var scroll = window.document.body.scrollTop;\n        this.setState({\n          scrollTop: scroll\n        });\n      }\n    }\n  }, {\n    key: 'setComponentTop',\n    value: function setComponentTop() {\n      var viewportOffset = this.refs.sidebar.getBoundingClientRect();\n      this.setState({\n        componentTop: viewportOffset.top\n      });\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setComponentTop();\n      this.scroll();\n\n      this.scrollEventListener = {\n        handleEvent: function handleEvent(event) {\n          _this2.scroll();\n        }\n      };\n\n      window.addEventListener('scroll', this.scrollEventListener);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      window.removeEventListener('scroll', this.scrollEventListener);\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps() {\n      this.setComponentTop();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          fixedHeader = _props.fixedHeader,\n          width = _props.width,\n          lineHeight = _props.lineHeight,\n          zIndex = _props.zIndex,\n          groupHeights = _props.groupHeights,\n          height = _props.height,\n          headerHeight = _props.headerHeight;\n      var _props$keys = this.props.keys,\n          groupIdKey = _props$keys.groupIdKey,\n          groupTitleKey = _props$keys.groupTitleKey;\n      var scrollTop = this.state.scrollTop;\n\n\n      var sidebarStyle = {\n        width: width + 'px',\n        height: height + 'px'\n      };\n\n      var headerStyle = {\n        height: headerHeight + 'px',\n        lineHeight: lineHeight + 'px',\n        width: width + 'px'\n      };\n\n      var groupsStyle = {\n        width: width + 'px'\n      };\n\n      if (fixedHeader === 'fixed') {\n        headerStyle.position = 'fixed';\n        headerStyle.zIndex = zIndex;\n        groupsStyle.paddingTop = headerStyle.height;\n      } else if (fixedHeader === 'absolute') {\n        var componentTop = this.state.componentTop;\n        if (scrollTop >= componentTop) {\n          headerStyle.position = 'absolute';\n          headerStyle.top = scrollTop - componentTop + 'px';\n          headerStyle.left = '0';\n          groupsStyle.paddingTop = headerStyle.height;\n        }\n      }\n\n      var header = _react2.default.createElement(\n        'div',\n        { ref: 'sidebarHeader', className: 'rct-sidebar-header', style: headerStyle },\n        this.props.children\n      );\n\n      var groupLines = [];\n      var i = 0;\n\n      this.props.groups.forEach(function (group, index) {\n        var elementStyle = {\n          height: groupHeights[index] - 1 + 'px',\n          lineHeight: groupHeights[index] - 1 + 'px'\n        };\n\n        groupLines.push(_react2.default.createElement(\n          'div',\n          { key: (0, _utils._get)(group, groupIdKey), className: 'rct-sidebar-row' + (i % 2 === 0 ? ' rct-sidebar-row-even' : ' rct-sidebar-row-odd'), style: elementStyle },\n          (0, _utils._get)(group, groupTitleKey)\n        ));\n        i += 1;\n      });\n\n      return _react2.default.createElement(\n        'div',\n        { ref: 'sidebar', className: 'rct-sidebar', style: sidebarStyle },\n        header,\n        _react2.default.createElement(\n          'div',\n          { style: groupsStyle },\n          groupLines\n        )\n      );\n    }\n  }]);\n\n  return Sidebar;\n}(_react.Component);\n\nexports.default = Sidebar;\n\n\nSidebar.propTypes = {\n  groups: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.array, _react2.default.PropTypes.object]).isRequired,\n  width: _react2.default.PropTypes.number.isRequired,\n  lineHeight: _react2.default.PropTypes.number.isRequired,\n  zIndex: _react2.default.PropTypes.number,\n  fixedHeader: _react2.default.PropTypes.oneOf(['fixed', 'absolute', 'none']),\n  keys: _react2.default.PropTypes.object.isRequired,\n  children: _react2.default.PropTypes.node\n};\nSidebar.defaultProps = {\n  fixedHeader: 'none',\n  zIndex: 12,\n  children: null\n};","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/lines/HorizontalLines.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar HorizontalLines = function (_Component) {\n  _inherits(HorizontalLines, _Component);\n\n  function HorizontalLines() {\n    _classCallCheck(this, HorizontalLines);\n\n    return _possibleConstructorReturn(this, (HorizontalLines.__proto__ || Object.getPrototypeOf(HorizontalLines)).apply(this, arguments));\n  }\n\n  _createClass(HorizontalLines, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !(nextProps.canvasWidth === this.props.canvasWidth && nextProps.lineHeight === this.props.lineHeight && nextProps.lineCount === this.props.lineCount && nextProps.groupHeights === this.props.groupHeights);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          lineCount = _props.lineCount,\n          canvasWidth = _props.canvasWidth,\n          groupHeights = _props.groupHeights,\n          headerHeight = _props.headerHeight;\n\n      var lines = [];\n\n      var totalHeight = headerHeight;\n      for (var i = 0; i < lineCount; i++) {\n        lines.push(_react2.default.createElement('div', { key: 'horizontal-line-' + i,\n          className: i % 2 === 0 ? 'rct-hl-even' : 'rct-hl-odd',\n          style: {\n            top: totalHeight + 'px',\n            left: '0px',\n            width: canvasWidth + 'px',\n            height: groupHeights[i] - 1 + 'px'\n          } }));\n        totalHeight += groupHeights[i];\n      }\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'rct-horizontal-lines' },\n        lines\n      );\n    }\n  }]);\n\n  return HorizontalLines;\n}(_react.Component);\n\nexports.default = HorizontalLines;\n\n\nHorizontalLines.propTypes = {\n  canvasWidth: _react2.default.PropTypes.number.isRequired,\n  lineHeight: _react2.default.PropTypes.number.isRequired,\n  lineCount: _react2.default.PropTypes.number.isRequired\n};\nHorizontalLines.defaultProps = {\n  borderWidth: 1\n};","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/lines/TodayLine.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar TodayLine = function (_Component) {\n  _inherits(TodayLine, _Component);\n\n  function TodayLine() {\n    _classCallCheck(this, TodayLine);\n\n    return _possibleConstructorReturn(this, (TodayLine.__proto__ || Object.getPrototypeOf(TodayLine)).apply(this, arguments));\n  }\n\n  _createClass(TodayLine, [{\n    key: 'render',\n\n    // TODO: should currentTime come from a prop? probably...?\n    value: function render() {\n      var currentTime = new Date().getTime();\n\n      if (currentTime > this.props.canvasTimeStart && currentTime < this.props.canvasTimeEnd) {\n        var ratio = this.props.canvasWidth / (this.props.canvasTimeEnd - this.props.canvasTimeStart);\n        var left = Math.round((currentTime - this.props.canvasTimeStart) * ratio);\n        var top = this.props.headerHeight;\n        var height = this.props.height - this.props.headerHeight;\n        var styles = {\n          top: top + 'px',\n          left: left + 'px',\n          height: height + 'px'\n        };\n\n        return _react2.default.createElement('div', { className: 'rct-today', style: styles });\n      } else {\n        return _react2.default.createElement('div', null);\n      }\n    }\n  }]);\n\n  return TodayLine;\n}(_react.Component);\n\nexports.default = TodayLine;\n\nTodayLine.propTypes = {\n  canvasTimeStart: _react2.default.PropTypes.number.isRequired,\n  canvasTimeEnd: _react2.default.PropTypes.number.isRequired,\n  canvasWidth: _react2.default.PropTypes.number.isRequired,\n  lineHeight: _react2.default.PropTypes.number.isRequired,\n  lineCount: _react2.default.PropTypes.number.isRequired\n};\nTodayLine.defaultProps = {};","/home/travis/build/npmtest/node-npmtest-react-calendar-timeline/node_modules/react-calendar-timeline/modules/lib/lines/VerticalLines.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require('../utils.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar VerticalLines = function (_Component) {\n  _inherits(VerticalLines, _Component);\n\n  function VerticalLines() {\n    _classCallCheck(this, VerticalLines);\n\n    return _possibleConstructorReturn(this, (VerticalLines.__proto__ || Object.getPrototypeOf(VerticalLines)).apply(this, arguments));\n  }\n\n  _createClass(VerticalLines, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !(nextProps.canvasTimeStart === this.props.canvasTimeStart && nextProps.canvasTimeEnd === this.props.canvasTimeEnd && nextProps.canvasWidth === this.props.canvasWidth && nextProps.lineHeight === this.props.lineHeight && nextProps.lineCount === this.props.lineCount && nextProps.minUnit === this.props.minUnit && nextProps.timeSteps === this.props.timeSteps && nextProps.fixedHeader === this.props.fixedHeader && nextProps.height === this.props.height && nextProps.headerHeight === this.props.headerHeight);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          canvasTimeStart = _props.canvasTimeStart,\n          canvasTimeEnd = _props.canvasTimeEnd,\n          canvasWidth = _props.canvasWidth,\n          minUnit = _props.minUnit,\n          timeSteps = _props.timeSteps,\n          height = _props.height,\n          headerHeight = _props.headerHeight;\n\n      var ratio = canvasWidth / (canvasTimeEnd - canvasTimeStart);\n\n      var lines = [];\n\n      (0, _utils.iterateTimes)(canvasTimeStart, canvasTimeEnd, minUnit, timeSteps, function (time, nextTime) {\n        var left = Math.round((time.valueOf() - canvasTimeStart) * ratio, -2);\n        var minUnitValue = time.get(minUnit === 'day' ? 'date' : minUnit);\n        var firstOfType = minUnitValue === (minUnit === 'day' ? 1 : 0);\n        var lineWidth = firstOfType ? 2 : 1;\n        var labelWidth = Math.ceil((nextTime.valueOf() - time.valueOf()) * ratio) - lineWidth;\n        var leftPush = _this2.props.fixedHeader === 'fixed' && firstOfType ? -1 : 0;\n\n        var classNames = 'rct-vl' + (firstOfType ? ' rct-vl-first' : '') + (minUnit === 'day' || minUnit === 'hour' || minUnit === 'minute' ? ' rct-day-' + time.day() : '');\n\n        lines.push(_react2.default.createElement('div', { key: 'line-' + time.valueOf(),\n          className: classNames,\n          style: {\n            top: headerHeight + 'px',\n            left: left + leftPush + 'px',\n            width: labelWidth + 'px',\n            height: height - headerHeight + 'px'\n          } }));\n      });\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'rct-vertical-lines' },\n        lines\n      );\n    }\n  }]);\n\n  return VerticalLines;\n}(_react.Component);\n\nexports.default = VerticalLines;\n\n\nVerticalLines.propTypes = {\n  canvasTimeStart: _react2.default.PropTypes.number.isRequired,\n  canvasTimeEnd: _react2.default.PropTypes.number.isRequired,\n  canvasWidth: _react2.default.PropTypes.number.isRequired,\n  lineHeight: _react2.default.PropTypes.number.isRequired,\n  lineCount: _react2.default.PropTypes.number.isRequired,\n  minUnit: _react2.default.PropTypes.string.isRequired,\n  timeSteps: _react2.default.PropTypes.object.isRequired,\n  fixedHeader: _react2.default.PropTypes.string.isRequired\n};\nVerticalLines.defaultProps = {\n  fixedHeader: 'none',\n  dayBackground: null\n};"}